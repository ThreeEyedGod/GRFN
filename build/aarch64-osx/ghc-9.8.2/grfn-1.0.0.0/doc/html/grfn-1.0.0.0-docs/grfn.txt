-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Uniformly-random pre-factored numbers (Kalai)
--   
--   grfn is a Haskell implementation of Adam Kalai's algorithm to get
--   uniform pre-factored numbers. See <a>README.md</a> for more details.
--   
--   As an example, a single pre-factored number may be obtained by one of
--   these 3 calls. preFactoredNumOfBitSizePar is a Concurrent parallized
--   implementation
--   
--   <pre>
--   &gt;&gt;&gt; genARandomPreFactoredNumberLTEn 20 -- will give a pre-factored number less than or equal to 20.
--   
--   &gt;&gt;&gt; Right (8,[2,2,2,1])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; preFactoredNumOfBitSize 20 -- will give a pre-factored number in the range [2^20, 2^21 - 1]
--   
--   &gt;&gt;&gt; Right (1695177,[17123,11,3,3,1])
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; preFactoredNumOfBitSizePar 60 -- will give a pre-factored number in the range [2^60, 2^61 - 1]
--   
--   &gt;&gt;&gt; Right (1245467344549977447,[332515759,233924281,179,19,3,3,1])
--   </pre>
@package grfn
@version 1.0.0.0


-- | Module for accessing functions based on Kalai's Algorithm
module FactoredRandomNumbers

-- | This is the Entry Function with a Integer bound. This is the core of
--   the Kalai algorithm Provide an integer input and it should generate a
--   tuple of a number less than the input integer and its prime factors
genARandomPreFactoredNumberLTEn :: Integer -> IO (Either Text (Integer, [Integer]))

-- | Takes an Integer as a Bitsize value to operate on range [2 ^ y, 2 ^ y
--   + 1 - 1] Provide an integer input and it should generate a tuple of a
--   number in the range [2^y, 2^y+1 -1] and its prime factors. if it
--   throws up a value below 2^n then do again. 50% of the time it should
--   result in success.
preFactoredNumOfBitSize :: Integer -> IO (Either Text (Integer, [Integer]))

-- | Takes an Integer for Bitsize value to operate on range [2 ^ y, 2 ^ y +
--   1 - 1]. This function leverages parallel execution Provide an integer
--   input and it should generate a tuple of a number in the range [2^y,
--   2^y+1 -1] and its prime factors In the event that the concurrent call
--   fails, a recovery through a basic parallelised call is attempted.
preFactoredNumOfBitSizePar :: Integer -> IO (Either Text (Integer, [Integer]))
instance GHC.Classes.Eq FactoredRandomNumbers.Strats
