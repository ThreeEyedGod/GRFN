1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
28:1-28:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
28:21-28:22::l :: "{v : GHC.Types.Int | v == l##a7d9\n                     && v >= 0\n                     && 0 < v}"
28:26-28:27::u :: "{v : GHC.Types.Int | v == u##a7da\n                     && v >= 0\n                     && 0 < v}"
28:31-28:32::l :: "{v : GHC.Types.Int | v == l##a7d9\n                     && v >= 0\n                     && 0 < v}"
28:35-28:36::lq_anf$##7205759403792821569 :: "GHC.Types.Int"
29:3-29:9::result :: "GHC.Types.Int"
29:13-29:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
29:23-29:29::lq_anf$##7205759403792821575 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7d9\n                                      && snd v == u##a7da\n                                      && x_Tuple21 v == l##a7d9\n                                      && x_Tuple22 v == u##a7da}"
29:24-29:25::l :: "{v : GHC.Types.Int | v == l##a7d9\n                     && v >= 0\n                     && 0 < v}"
29:27-29:28::u :: "{v : GHC.Types.Int | v == u##a7da\n                     && v >= 0\n                     && 0 < v}"
29:30-29:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
30:3-30:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
30:10-30:16::result :: "{v : GHC.Types.Int | v == result##a7db}"
30:23-30:24::u :: "{v : GHC.Types.Int | v == u##a7da\n                     && v >= 0\n                     && 0 < v}"
30:31-30:32::l :: "{v : GHC.Types.Int | v == l##a7d9\n                     && v >= 0\n                     && 0 < v}"
31:16-31:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
31:20-31:32::lq_anf$##7205759403792821574 :: "[GHC.Types.Char]"
39:1-39:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
39:14-39:22::GHC.Base.$fApplicativeIO :: "{v : (GHC.Base.Applicative GHC.Types.IO) | v == $fApplicativeIO}"
39:19-39:22::lq_anf$##7205759403792821594 :: "[GHC.Types.Int]"
39:20-39:21::lq_anf$##7205759403792821592 :: "GHC.Types.Int"
40:14-40:15::ds_d7gg :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
40:19-40:20::lq_anf$##7205759403792821581 :: "GHC.Types.Int"
41:3-41:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
41:11-41:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
41:22-41:28::lq_anf$##7205759403792821588 :: "(GHC.Types.Int, GHC.Types.Int)"
41:23-41:24::lq_anf$##7205759403792821587 :: "GHC.Types.Int"
41:26-41:27::ds_d7gg :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
42:3-42:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
42:8-42:16::lq_anf$##7205759403792821589 :: "v_B2:{VV##1113 : [GHC.Types.Int] | $lq_anf$##7205759403792821580##d7hi##k_ == 1\n                                   || product $VV##1113##k_ == $lq_anf$##7205759403792821580##d7hi##k_\n                                   && $lq_anf$##7205759403792821581##d7hj##k_ == 1\n                                      || product $VV##1113##k_ == $lq_anf$##7205759403792821581##d7hj##k_\n                                   && $lq_anf$##7205759403792821586##d7ho##k_ == 1\n                                      || product $VV##1113##k_ == $lq_anf$##7205759403792821586##d7ho##k_\n                                   && $lq_anf$##7205759403792821587##d7hp##k_ == 1\n                                      || product $VV##1113##k_ == $lq_anf$##7205759403792821587##d7hp##k_\n                                   && len $VV##1113##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7dd\n                                                                                        && len v == 1 + len v_B2\n                                                                                        && tail v == v_B2}"
42:9-42:13::seed :: "{v : GHC.Types.Int | v == seed##a7dd\n                     && v >= 0\n                     && 0 < v}"
42:17-42:32::lq_anf$##7205759403792821590 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7dd}])"
42:27-42:31::seed :: "{v : GHC.Types.Int | v == seed##a7dd\n                     && v >= 0\n                     && 0 < v}"
43:14-43:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
43:18-43:30::lq_anf$##7205759403792821585 :: "[GHC.Types.Char]"
51:1-51:33::Lib.genARandomPreFactoredNumberLTEn' :: "x1:GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                        && 0 < VV##0}, {VV##0 : [{VV##0 : GHC.Types.Int | VV##0 == 1\n                                                                                                                                                          || (isPrime VV##0\n                                                                                                                                                              && 1 <= VV##0\n                                                                                                                                                              && VV##0 <= x1)\n                                                                                                                                                          && VV##0 >= 0\n                                                                                                                                                          && 0 < VV##0}] | x1 == 1\n                                                                                                                                                                           || product VV##0 == x1})))"
51:34-51:35::x :: "GHC.Types.Int"
51:38-51:39::x :: "{v : GHC.Types.Int | v == x##a7de}"
51:43-51:44::lq_anf$##7205759403792821596 :: "GHC.Types.Int"
51:47-51:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:54-51:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
51:61-51:75::lq_anf$##7205759403792821620 :: "Data.Text.Internal.Text"
51:66-51:75::lq_anf$##7205759403792821619 :: "[GHC.Types.Char]"
52:38-52:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
52:45-52:59::lq_anf$##7205759403792821617 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
52:51-52:59::lq_anf$##7205759403792821616 :: "(GHC.Types.Int, [GHC.Types.Int])"
52:52-52:53::lq_anf$##7205759403792821611 :: "GHC.Types.Int"
52:55-52:58::lq_anf$##7205759403792821615 :: "[GHC.Types.Int]"
52:56-52:57::lq_anf$##7205759403792821613 :: "GHC.Types.Int"
54:3-54:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7de}]"
54:14-54:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
54:23-54:24::x :: "{v : GHC.Types.Int | v == x##a7de}"
55:7-55:10::rsp :: "{VV##1840 : ({VV##1823 : GHC.Types.Int | false}, {VV##1830 : [{VV##1825 : GHC.Types.Int | false}] | false}) | false}"
55:12-55:14::ps :: "{VV##1931 : GHC.Types.Int | false}"
55:16-55:18::sq :: "{VV##1384 : [GHC.Types.Int] | false}"
55:22-55:58::lq_anf$##7205759403792821604 :: "({v : GHC.Types.Int | false}, {v : [{v : GHC.Types.Int | false}] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
55:23-55:33::lq_anf$##7205759403792821601 :: "GHC.Types.Int"
55:31-55:33::sq :: "{VV##1384 : [GHC.Types.Int] | false}"
55:35-55:57::lq_anf$##7205759403792821603 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7dg}"
55:42-55:49::lq_anf$##7205759403792821602 :: "GHC.Types.Int -> GHC.Types.Bool"
55:50-55:57::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7de}] | v == solnSet##a7dg\n                                               && len v >= 0}"
56:3-56:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
56:7-56:16::lq_anf$##7205759403792821606 :: "{v : GHC.Types.Bool | v <=> ps##a7fn <= x##a7de}"
56:8-56:10::ps :: "{v : GHC.Types.Int | false}"
56:14-56:15::x :: "{v : GHC.Types.Int | v == x##a7de}"
56:17-56:35::lq_anf$##7205759403792821608 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
56:18-56:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
56:25-56:34::lq_anf$##7205759403792821607 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
56:31-56:34::rsp :: "{v : ({v : GHC.Types.Int | false}, {v : [{v : GHC.Types.Int | false}] | false}) | false}"
56:36-56:72::lq_anf$##7205759403792821609 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({v : GHC.Types.Int | v >= 0\n                                                                                && 0 < v}, {v : [{v : GHC.Types.Int | v == 1\n                                                                                                                      || (isPrime v\n                                                                                                                          && 1 <= v\n                                                                                                                          && v <= x##a7de)\n                                                                                                                      && v >= 0\n                                                                                                                      && 0 < v}] | x##a7de == 1\n                                                                                                                                   || product v == x##a7de})))"
56:70-56:71::x :: "{v : GHC.Types.Int | v == x##a7de}"