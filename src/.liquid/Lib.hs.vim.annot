1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
39:1-39:15::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
39:16-39:17::x :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
39:20-39:21::x :: "{v : GHC.Types.Int | v == x##a7jH\n                     && v >= 0\n                     && 0 < v}"
39:25-39:26::lq_anf$##7205759403792822736 :: "GHC.Types.Int"
39:29-39:33::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
39:36-39:40::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
39:43-39:57::lq_anf$##7205759403792822789 :: "Data.Text.Internal.Text"
39:48-39:57::lq_anf$##7205759403792822788 :: "[GHC.Types.Char]"
40:20-40:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
40:27-40:35::lq_anf$##7205759403792822786 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
40:33-40:35::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
41:20-41:21::x :: "{v : GHC.Types.Int | v == x##a7jH\n                     && v >= 0\n                     && 0 < v}"
41:25-41:26::lq_anf$##7205759403792822742 :: "GHC.Types.Int"
42:3-42:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
42:11-42:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
42:22-42:28::lq_anf$##7205759403792822751 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x##a7jH\n                                      && x_Tuple22 v == x##a7jH}"
42:23-42:24::lq_anf$##7205759403792822750 :: "GHC.Types.Int"
42:26-42:27::x :: "{v : GHC.Types.Int | v == x##a7jH\n                     && v >= 0\n                     && 0 < v}"
43:3-43:4::x :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= seed##a7jJ}])"
43:8-43:27::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
43:23-43:27::seed :: "{v : GHC.Types.Int | v == seed##a7jJ\n                     && v >= 0\n                     && 0 < v}"
44:8-44:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= seed##a7jJ}]) | v == x##a7jK}"
45:15-45:19::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
45:22-45:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
45:29-45:43::lq_anf$##7205759403792822755 :: "Data.Text.Internal.Text"
45:34-45:43::lq_anf$##7205759403792822754 :: "[GHC.Types.Char]"
46:17-46:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
46:24-46:28::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
46:31-46:45::lq_anf$##7205759403792822760 :: "Data.Text.Internal.Text"
46:36-46:45::lq_anf$##7205759403792822759 :: "[GHC.Types.Char]"
48:12-48:78::lq_anf$##7205759403792822777 :: "GHC.Types.Bool"
48:13-48:17::seed :: "{v : GHC.Types.Int | v == seed##a7jJ\n                     && v >= 0\n                     && 0 < v}"
48:21-48:22::x :: "{v : GHC.Types.Int | v == x##a7jH\n                     && v >= 0\n                     && 0 < v}"
48:26-48:30::seed :: "{v : GHC.Types.Int | v == seed##a7jJ\n                     && v >= 0\n                     && 0 < v}"
48:33-48:34::lq_anf$##7205759403792822764 :: "GHC.Types.Int"
48:38-48:40::x1 :: "{v : GHC.Types.Int | v == x1##a7jM\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7jJ}"
48:44-48:45::x :: "{v : GHC.Types.Int | v == x##a7jH\n                     && v >= 0\n                     && 0 < v}"
48:49-48:51::x1 :: "{v : GHC.Types.Int | v == x1##a7jM\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7jJ}"
48:54-48:55::lq_anf$##7205759403792822768 :: "GHC.Types.Int"
48:59-48:77::lq_anf$##7205759403792822773 :: "GHC.Types.Bool"
48:60-48:71::lq_anf$##7205759403792822770 :: "{v : GHC.Types.Int | v == seed##a7jJ - x1##a7jM}"
48:61-48:65::seed :: "{v : GHC.Types.Int | v == seed##a7jJ\n                     && v >= 0\n                     && 0 < v}"
48:68-48:70::x1 :: "{v : GHC.Types.Int | v == x1##a7jM\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7jJ}"
48:75-48:76::lq_anf$##7205759403792822772 :: "GHC.Types.Int"
49:17-49:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
49:24-49:42::lq_anf$##7205759403792822784 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
49:30-49:42::lq_anf$##7205759403792822783 :: "{v : [GHC.Types.Int] | head v == seed##a7jJ}"
49:31-49:35::seed :: "{v : GHC.Types.Int | v == seed##a7jJ\n                     && v >= 0\n                     && 0 < v}"
49:38-49:41::ds_d7yq :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= seed##a7jJ}] | len v >= 0}"
50:18-50:22::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
50:25-50:29::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
50:32-50:46::lq_anf$##7205759403792822781 :: "Data.Text.Internal.Text"
50:37-50:46::lq_anf$##7205759403792822780 :: "[GHC.Types.Char]"
51:20-51:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
51:27-51:31::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
51:34-51:48::lq_anf$##7205759403792822747 :: "Data.Text.Internal.Text"
51:39-51:48::lq_anf$##7205759403792822746 :: "[GHC.Types.Char]"
58:1-58:32::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
58:33-58:34::x :: "GHC.Types.Int"
58:37-58:38::x :: "{v : GHC.Types.Int | v == x##a7jN}"
58:42-58:43::lq_anf$##7205759403792822792 :: "GHC.Types.Int"
58:46-58:50::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
58:53-58:57::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
58:60-58:74::lq_anf$##7205759403792822839 :: "Data.Text.Internal.Text"
58:65-58:74::lq_anf$##7205759403792822838 :: "[GHC.Types.Char]"
59:37-59:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
59:44-59:58::lq_anf$##7205759403792822836 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
59:50-59:58::lq_anf$##7205759403792822835 :: "(GHC.Types.Int, [GHC.Types.Int])"
59:51-59:52::lq_anf$##7205759403792822830 :: "GHC.Types.Int"
59:54-59:57::lq_anf$##7205759403792822834 :: "[GHC.Types.Int]"
59:55-59:56::lq_anf$##7205759403792822832 :: "GHC.Types.Int"
60:37-60:38::x :: "{v : GHC.Types.Int | v == x##a7jN}"
60:42-60:43::lq_anf$##7205759403792822798 :: "GHC.Types.Int"
61:3-61:4::m :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= x##a7jN}])"
61:8-61:24::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
61:23-61:24::x :: "{v : GHC.Types.Int | v == x##a7jN}"
62:8-62:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= x##a7jN}]) | v == m##a7jP}"
63:15-63:19::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
63:22-63:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
63:29-63:43::lq_anf$##7205759403792822808 :: "Data.Text.Internal.Text"
63:34-63:43::lq_anf$##7205759403792822807 :: "[GHC.Types.Char]"
64:25-64:93::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
64:29-64:38::lq_anf$##7205759403792822825 :: "{v : GHC.Types.Bool | v <=> ps##a7oD <= x##a7jN}"
64:30-64:32::ps :: "{v : GHC.Types.Int | v == ps##a7oD}"
64:36-64:37::x :: "{v : GHC.Types.Int | v == x##a7jN}"
64:39-64:57::lq_anf$##7205759403792822827 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
64:40-64:44::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
64:47-64:56::lq_anf$##7205759403792822826 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
64:53-64:56::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7oA}"
64:58-64:93::lq_anf$##7205759403792822828 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
64:91-64:92::x :: "{v : GHC.Types.Int | v == x##a7jN}"
66:9-66:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
66:14-66:16::ps :: "GHC.Types.Int"
66:18-66:20::sq :: "[GHC.Types.Int]"
66:24-66:85::lq_anf$##7205759403792822823 :: "(GHC.Types.Int, [GHC.Types.Int])"
66:25-66:35::lq_anf$##7205759403792822810 :: "GHC.Types.Int"
66:33-66:35::sq :: "[GHC.Types.Int]"
66:37-66:38::lq_anf$##7205759403792822812 :: "GHC.Types.Int"
66:41-66:84::lq_anf$##7205759403792822821 :: "[GHC.Types.Int]"
66:42-66:43::ds_d7yS :: "GHC.Types.Int"
66:51-66:76::lq_anf$##7205759403792822820 :: "{v : [GHC.Types.Int] | len v <= len seqNumbers##a7jQ}"
66:58-66:65::lq_anf$##7205759403792822819 :: "GHC.Types.Int -> GHC.Types.Bool"
66:66-66:76::seqNumbers :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7jN}] | v == seqNumbers##a7jQ\n                                               && len v >= 0}"
66:78-66:79::ds_d7yS :: "GHC.Types.Int"
66:82-66:83::lq_anf$##7205759403792822815 :: "GHC.Types.Int"
67:37-67:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
67:44-67:48::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
67:51-67:65::lq_anf$##7205759403792822803 :: "Data.Text.Internal.Text"
67:56-67:65::lq_anf$##7205759403792822802 :: "[GHC.Types.Char]"
75:1-75:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
75:21-75:22::l :: "{v : GHC.Types.Int | v == l##a7jV\n                     && v >= 0\n                     && 0 < v}"
75:26-75:27::u :: "{v : GHC.Types.Int | v == u##a7jW\n                     && v >= 0\n                     && 0 < v}"
75:31-75:32::l :: "{v : GHC.Types.Int | v == l##a7jV\n                     && v >= 0\n                     && 0 < v}"
75:35-75:36::lq_anf$##7205759403792822718 :: "GHC.Types.Int"
76:3-76:9::result :: "GHC.Types.Int"
76:13-76:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
76:23-76:29::lq_anf$##7205759403792822724 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7jV\n                                      && snd v == u##a7jW\n                                      && x_Tuple21 v == l##a7jV\n                                      && x_Tuple22 v == u##a7jW}"
76:24-76:25::l :: "{v : GHC.Types.Int | v == l##a7jV\n                     && v >= 0\n                     && 0 < v}"
76:27-76:28::u :: "{v : GHC.Types.Int | v == u##a7jW\n                     && v >= 0\n                     && 0 < v}"
76:30-76:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
77:3-77:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
77:10-77:16::result :: "{v : GHC.Types.Int | v == result##a7jX}"
77:23-77:24::u :: "{v : GHC.Types.Int | v == u##a7jW\n                     && v >= 0\n                     && 0 < v}"
77:31-77:32::l :: "{v : GHC.Types.Int | v == l##a7jV\n                     && v >= 0\n                     && 0 < v}"
78:16-78:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
78:20-78:32::lq_anf$##7205759403792822723 :: "[GHC.Types.Char]"