1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
22:1-22:32::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
22:33-22:34::x :: "GHC.Types.Int"
22:37-22:38::x :: "{v : GHC.Types.Int | v == x##a7gr}"
22:42-22:43::lq_anf$##7205759403792822271 :: "GHC.Types.Int"
22:46-22:50::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
22:53-22:57::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
22:60-22:74::lq_anf$##7205759403792822296 :: "Data.Text.Internal.Text"
22:65-22:74::lq_anf$##7205759403792822295 :: "[GHC.Types.Char]"
23:37-23:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
23:44-23:58::lq_anf$##7205759403792822293 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
23:50-23:58::lq_anf$##7205759403792822292 :: "(GHC.Types.Int, [GHC.Types.Int])"
23:51-23:52::lq_anf$##7205759403792822287 :: "GHC.Types.Int"
23:54-23:57::lq_anf$##7205759403792822291 :: "[GHC.Types.Int]"
23:55-23:56::lq_anf$##7205759403792822289 :: "GHC.Types.Int"
24:37-24:47::lq_anf$##7205759403792822284 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= x##a7gr}])"
24:46-24:47::x :: "{v : GHC.Types.Int | v == x##a7gr}"
24:52-24:68::lq_anf$##7205759403792822285 :: "[GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
24:67-24:68::x :: "{v : GHC.Types.Int | v == x##a7gr}"
26:5-26:19::haltOrContinue :: "GHC.Types.Int -> [GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
26:20-26:22::n' :: "GHC.Types.Int"
26:23-26:30::solnSet :: "[GHC.Types.Int]"
27:9-27:11::lq_anf$##7205759403792822280 :: "GHC.Types.Int"
27:15-27:17::n' :: "{v : GHC.Types.Int | v == n'##a7gu}"
27:20-27:24::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
27:27-27:39::lq_anf$##7205759403792822283 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
27:33-27:39::result :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == result##a7jT}"
28:21-28:55::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
28:53-28:55::n' :: "{v : GHC.Types.Int | v == n'##a7gu}"
30:9-30:15::result :: "(GHC.Types.Int, [GHC.Types.Int])"
30:21-30:23::sq :: "{VV##1757 : [GHC.Types.Int] | false}"
30:27-30:66::lq_anf$##7205759403792822278 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
30:28-30:38::lq_anf$##7205759403792822276 :: "GHC.Types.Int"
30:36-30:38::sq :: "{VV##1757 : [GHC.Types.Int] | false}"
30:40-30:65::lq_anf$##7205759403792822277 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7gv}"
30:47-30:57::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
30:58-30:65::solnSet :: "{v : [GHC.Types.Int] | v == solnSet##a7gv\n                       && len v >= 0}"
44:1-44:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
44:14-44:21::lq_anf$##7205759403792822269 :: "{v : [GHC.Types.Int] | len v == 0}"
44:19-44:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
45:14-45:15::ds_d7qU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:18-45:19::lq_anf$##7205759403792822261 :: "GHC.Types.Int"
45:22-45:55::GHC.Base.$fMonadIO :: "{v : (GHC.Base.Monad GHC.Types.IO) | v == $fMonadIO}"
45:23-45:33::Lib.getRndMInt :: "x1:{v : ({v : GHC.Types.Int | v >= 0\n                              && 0 < v}, {v : GHC.Types.Int | v >= 0\n                                                              && 0 < v}) | fst v > 0\n                                                                           && fst v <= snd v} -> (GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                                                                                                                    && v >= fst x1\n                                                                                                                                    && 0 < v\n                                                                                                                                    && v <= snd x1})"
45:39-45:47::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
45:49-45:55::lq_anf$##7205759403792822268 :: "(GHC.Types.Int, GHC.Types.Int)"
45:50-45:51::lq_anf$##7205759403792822267 :: "GHC.Types.Int"
45:53-45:54::ds_d7qU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
46:14-46:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
46:18-46:30::lq_anf$##7205759403792822265 :: "[GHC.Types.Char]"
52:1-52:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
52:21-52:22::l :: "{v : GHC.Types.Int | v == l##a7gA\n                     && v >= 0\n                     && 0 < v}"
52:26-52:27::u :: "{v : GHC.Types.Int | v == u##a7gB\n                     && v >= 0\n                     && 0 < v}"
52:31-52:32::l :: "{v : GHC.Types.Int | v == l##a7gA\n                     && v >= 0\n                     && 0 < v}"
52:35-52:36::lq_anf$##7205759403792822247 :: "GHC.Types.Int"
52:39-52:44::lq_anf$##7205759403792822253 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7gA > x1 then l##a7gA else x1)}"
52:43-52:44::l :: "{v : GHC.Types.Int | v == l##a7gA\n                     && v >= 0\n                     && 0 < v}"
52:47-52:52::lq_anf$##7205759403792822254 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7gB < x1 then u##a7gB else x1)}"
52:51-52:52::u :: "{v : GHC.Types.Int | v == u##a7gB\n                     && v >= 0\n                     && 0 < v}"
52:57-52:86::lq_anf$##7205759403792822257 :: "(GHC.Types.IO GHC.Types.Int)"
52:67-52:73::lq_anf$##7205759403792822256 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7gA\n                                      && snd v == u##a7gB\n                                      && x_Tuple21 v == l##a7gA\n                                      && x_Tuple22 v == u##a7gB}"
52:68-52:69::l :: "{v : GHC.Types.Int | v == l##a7gA\n                     && v >= 0\n                     && 0 < v}"
52:71-52:72::u :: "{v : GHC.Types.Int | v == u##a7gB\n                     && v >= 0\n                     && 0 < v}"
52:74-52:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
53:16-53:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
53:20-53:32::lq_anf$##7205759403792822252 :: "[GHC.Types.Char]"
59:1-59:2::f :: "a -> b c"
59:3-59:7::Lib.>=>: :: "forall a b c .\n(GHC.Base.Monad<[]> a) =>\n(b -> a c) -> (c -> a {VV##662 : [{VV : c | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}) -> b -> a [c]"
59:8-59:9::g :: "a -> b {VV##662 : [{VV : a | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}"
59:12-59:13::f :: "a -> b c"
59:18-59:37::$dFunctor_a7ii :: "{v : (GHC.Base.Functor a) | v == $dFunctor_a7ii}"
59:19-59:20::u :: "a"
59:24-59:29::lq_anf$##7205759403792822227 :: "v_B2:{VV##759 : [a] | len $VV##759##k_ >= 0} -> {v : [a] | head v == u##a7gE\n                                                           && len v == 1 + len v_B2\n                                                           && tail v == v_B2}"
59:25-59:26::u :: "{VV : a | VV == u##a7gE}"
59:34-59:37::lq_anf$##7205759403792822228 :: "a {v : [{VV : b | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}"
59:36-59:37::u :: "{VV : a | VV == u##a7gE}"
65:1-65:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
65:12-65:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
65:16-65:17::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"
65:20-65:21::lq_anf$##7205759403792822235 :: "GHC.Types.Int"
65:24-65:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
65:28-65:40::lq_anf$##7205759403792822243 :: "[GHC.Types.Char]"
66:16-66:24::lq_anf$##7205759403792822240 :: "GHC.Types.Bool"
66:17-66:18::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"
66:22-66:23::lq_anf$##7205759403792822239 :: "GHC.Types.Int"
66:28-66:37::lq_anf$##7205759403792822241 :: "GHC.Types.Bool"
66:36-66:37::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"