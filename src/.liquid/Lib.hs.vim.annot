1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
36:1-36:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
36:21-36:22::l :: "{v : GHC.Types.Int | v == l##a9fN\n                     && v >= 0\n                     && 0 < v}"
36:26-36:27::u :: "{v : GHC.Types.Int | v == u##a9fO\n                     && v >= 0\n                     && 0 < v}"
36:31-36:32::l :: "{v : GHC.Types.Int | v == l##a9fN\n                     && v >= 0\n                     && 0 < v}"
36:35-36:36::lq_anf$##7205759403792829407 :: "GHC.Types.Int"
37:3-37:9::result :: "GHC.Types.Int"
37:13-37:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
37:23-37:29::lq_anf$##7205759403792829413 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a9fN\n                                      && snd v == u##a9fO\n                                      && x_Tuple21 v == l##a9fN\n                                      && x_Tuple22 v == u##a9fO}"
37:24-37:25::l :: "{v : GHC.Types.Int | v == l##a9fN\n                     && v >= 0\n                     && 0 < v}"
37:27-37:28::u :: "{v : GHC.Types.Int | v == u##a9fO\n                     && v >= 0\n                     && 0 < v}"
37:30-37:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
38:3-38:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
38:10-38:16::result :: "{v : GHC.Types.Int | v == result##a9fP}"
38:23-38:24::u :: "{v : GHC.Types.Int | v == u##a9fO\n                     && v >= 0\n                     && 0 < v}"
38:31-38:32::l :: "{v : GHC.Types.Int | v == l##a9fN\n                     && v >= 0\n                     && 0 < v}"
39:16-39:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
39:20-39:32::lq_anf$##7205759403792829412 :: "[GHC.Types.Char]"
47:1-47:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
47:14-47:22::GHC.Base.$fApplicativeIO :: "{v : (GHC.Base.Applicative GHC.Types.IO) | v == $fApplicativeIO}"
47:19-47:22::lq_anf$##7205759403792829432 :: "[GHC.Types.Int]"
47:20-47:21::lq_anf$##7205759403792829430 :: "GHC.Types.Int"
48:14-48:15::ds_d9iU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
48:19-48:20::lq_anf$##7205759403792829419 :: "GHC.Types.Int"
49:3-49:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
49:11-49:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
49:22-49:28::lq_anf$##7205759403792829426 :: "(GHC.Types.Int, GHC.Types.Int)"
49:23-49:24::lq_anf$##7205759403792829425 :: "GHC.Types.Int"
49:26-49:27::ds_d9iU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
50:3-50:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
50:8-50:16::lq_anf$##7205759403792829427 :: "v_B2:{VV##1108 : [GHC.Types.Int] | len $VV##1108##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a9fR\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
50:9-50:13::seed :: "{v : GHC.Types.Int | v == seed##a9fR\n                     && v >= 0\n                     && 0 < v}"
50:17-50:32::lq_anf$##7205759403792829428 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a9fR}])"
50:27-50:31::seed :: "{v : GHC.Types.Int | v == seed##a9fR\n                     && v >= 0\n                     && 0 < v}"
51:14-51:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
51:18-51:30::lq_anf$##7205759403792829423 :: "[GHC.Types.Char]"
59:1-59:33::Lib.genARandomPreFactoredNumberLTEn' :: "x1:GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                        && 0 < VV##0}, [{VV##0 : GHC.Types.Int | VV##0 == 1\n                                                                                                                                                 || (isPrime VV##0\n                                                                                                                                                     && 1 <= VV##0\n                                                                                                                                                     && VV##0 <= x1)\n                                                                                                                                                 && VV##0 >= 0\n                                                                                                                                                 && 0 < VV##0}])))"
59:34-59:35::x :: "GHC.Types.Int"
59:38-59:39::x :: "{v : GHC.Types.Int | v == x##a9fS}"
59:43-59:44::lq_anf$##7205759403792829434 :: "GHC.Types.Int"
59:47-59:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
59:54-59:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
59:61-59:75::lq_anf$##7205759403792829458 :: "Data.Text.Internal.Text"
59:66-59:75::lq_anf$##7205759403792829457 :: "[GHC.Types.Char]"
60:38-60:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
60:45-60:59::lq_anf$##7205759403792829455 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
60:51-60:59::lq_anf$##7205759403792829454 :: "(GHC.Types.Int, [GHC.Types.Int])"
60:52-60:53::lq_anf$##7205759403792829449 :: "GHC.Types.Int"
60:55-60:58::lq_anf$##7205759403792829453 :: "[GHC.Types.Int]"
60:56-60:57::lq_anf$##7205759403792829451 :: "GHC.Types.Int"
62:3-62:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a9fS}]"
62:14-62:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
62:23-62:24::x :: "{v : GHC.Types.Int | v == x##a9fS}"
63:7-63:10::rsp :: "{VV##1835 : ({VV##1818 : GHC.Types.Int | false}, [{VV##1820 : GHC.Types.Int | false}]) | false}"
63:12-63:14::ps :: "{VV##1926 : GHC.Types.Int | false}"
63:16-63:18::sq :: "{VV##1379 : [GHC.Types.Int] | false}"
63:22-63:58::lq_anf$##7205759403792829442 :: "({v : GHC.Types.Int | false}, {v : [{v : GHC.Types.Int | false}] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
63:23-63:33::lq_anf$##7205759403792829439 :: "GHC.Types.Int"
63:31-63:33::sq :: "{VV##1379 : [GHC.Types.Int] | false}"
63:35-63:57::lq_anf$##7205759403792829441 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a9fU}"
63:42-63:49::lq_anf$##7205759403792829440 :: "GHC.Types.Int -> GHC.Types.Bool"
63:50-63:57::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a9fS}] | v == solnSet##a9fU\n                                               && len v >= 0}"
64:3-64:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
64:7-64:16::lq_anf$##7205759403792829444 :: "{v : GHC.Types.Bool | v <=> ps##a9i1 <= x##a9fS}"
64:8-64:10::ps :: "{v : GHC.Types.Int | false}"
64:14-64:15::x :: "{v : GHC.Types.Int | v == x##a9fS}"
64:17-64:35::lq_anf$##7205759403792829446 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
64:18-64:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
64:25-64:34::lq_anf$##7205759403792829445 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
64:31-64:34::rsp :: "{v : ({v : GHC.Types.Int | false}, [{v : GHC.Types.Int | false}]) | false}"
64:36-64:72::lq_anf$##7205759403792829447 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({v : GHC.Types.Int | v >= 0\n                                                                                && 0 < v}, [{v : GHC.Types.Int | v == 1\n                                                                                                                 || (isPrime v\n                                                                                                                     && 1 <= v\n                                                                                                                     && v <= x##a9fS)\n                                                                                                                 && v >= 0\n                                                                                                                 && 0 < v}])))"
64:70-64:71::x :: "{v : GHC.Types.Int | v == x##a9fS}"