1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
25:1-25:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
25:21-25:22::l :: "{v : GHC.Types.Int | v == l##a7dr\n                     && v >= 0\n                     && 0 < v}"
25:26-25:27::u :: "{v : GHC.Types.Int | v == u##a7ds\n                     && v >= 0\n                     && 0 < v}"
25:31-25:32::l :: "{v : GHC.Types.Int | v == l##a7dr\n                     && v >= 0\n                     && 0 < v}"
25:35-25:36::lq_anf$##7205759403792821604 :: "GHC.Types.Int"
26:3-26:9::result :: "GHC.Types.Int"
26:13-26:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
26:23-26:29::lq_anf$##7205759403792821610 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7dr\n                                      && snd v == u##a7ds\n                                      && x_Tuple21 v == l##a7dr\n                                      && x_Tuple22 v == u##a7ds}"
26:24-26:25::l :: "{v : GHC.Types.Int | v == l##a7dr\n                     && v >= 0\n                     && 0 < v}"
26:27-26:28::u :: "{v : GHC.Types.Int | v == u##a7ds\n                     && v >= 0\n                     && 0 < v}"
26:30-26:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
27:3-27:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
27:10-27:16::result :: "{v : GHC.Types.Int | v == result##a7dt}"
27:23-27:24::u :: "{v : GHC.Types.Int | v == u##a7ds\n                     && v >= 0\n                     && 0 < v}"
27:31-27:32::l :: "{v : GHC.Types.Int | v == l##a7dr\n                     && v >= 0\n                     && 0 < v}"
28:16-28:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
28:20-28:32::lq_anf$##7205759403792821609 :: "[GHC.Types.Char]"
35:1-35:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
35:14-35:21::lq_anf$##7205759403792821626 :: "{v : [GHC.Types.Int] | len v == 0}"
35:19-35:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
36:14-36:15::ds_d7gP :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:18-36:19::lq_anf$##7205759403792821616 :: "GHC.Types.Int"
37:3-37:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:11-37:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
37:22-37:28::lq_anf$##7205759403792821623 :: "(GHC.Types.Int, GHC.Types.Int)"
37:23-37:24::lq_anf$##7205759403792821622 :: "GHC.Types.Int"
37:26-37:27::ds_d7gP :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
38:3-38:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
38:8-38:16::lq_anf$##7205759403792821624 :: "v_B2:{VV##1120 : [GHC.Types.Int] | $lq_anf$##7205759403792821615##d7hR##k_ == 1\n                                   || product $VV##1120##k_ == $lq_anf$##7205759403792821615##d7hR##k_\n                                   && $lq_anf$##7205759403792821616##d7hS##k_ == 1\n                                      || product $VV##1120##k_ == $lq_anf$##7205759403792821616##d7hS##k_\n                                   && $lq_anf$##7205759403792821621##d7hX##k_ == 1\n                                      || product $VV##1120##k_ == $lq_anf$##7205759403792821621##d7hX##k_\n                                   && $lq_anf$##7205759403792821622##d7hY##k_ == 1\n                                      || product $VV##1120##k_ == $lq_anf$##7205759403792821622##d7hY##k_\n                                   && len $VV##1120##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7dv\n                                                                                        && len v == 1 + len v_B2\n                                                                                        && tail v == v_B2}"
38:9-38:13::seed :: "{v : GHC.Types.Int | v == seed##a7dv\n                     && v >= 0\n                     && 0 < v}"
38:17-38:32::lq_anf$##7205759403792821625 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7dv}])"
38:27-38:31::seed :: "{v : GHC.Types.Int | v == seed##a7dv\n                     && v >= 0\n                     && 0 < v}"
39:14-39:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
39:18-39:30::lq_anf$##7205759403792821620 :: "[GHC.Types.Char]"
47:1-47:33::Lib.genARandomPreFactoredNumberLTEn' :: "x1:GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                        && 0 < VV##0\n                                                                                                        && VV##0 <= x1}, {VV##0 : [{VV##0 : GHC.Types.Int | VV##0 == 1\n                                                                                                                                                            || (isPrime VV##0\n                                                                                                                                                                && 1 <= VV##0\n                                                                                                                                                                && VV##0 <= x1)\n                                                                                                                                                            && VV##0 >= 0\n                                                                                                                                                            && 0 < VV##0}] | x1 == 1\n                                                                                                                                                                             || product VV##0 == x1})))"
47:34-47:35::x :: "GHC.Types.Int"
47:38-47:39::x :: "{v : GHC.Types.Int | v == x##a7dw}"
47:43-47:44::lq_anf$##7205759403792821632 :: "GHC.Types.Int"
47:47-47:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
47:54-47:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
47:61-47:75::lq_anf$##7205759403792821655 :: "Data.Text.Internal.Text"
47:66-47:75::lq_anf$##7205759403792821654 :: "[GHC.Types.Char]"
48:38-48:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:45-48:59::lq_anf$##7205759403792821652 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
48:51-48:59::lq_anf$##7205759403792821651 :: "(GHC.Types.Int, [GHC.Types.Int])"
48:52-48:53::lq_anf$##7205759403792821646 :: "GHC.Types.Int"
48:55-48:58::lq_anf$##7205759403792821650 :: "[GHC.Types.Int]"
48:56-48:57::lq_anf$##7205759403792821648 :: "GHC.Types.Int"
50:3-50:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7dw}]"
50:14-50:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
50:23-50:24::x :: "{v : GHC.Types.Int | v == x##a7dw}"
51:7-51:10::rsp :: "{VV##1852 : ({VV##1835 : GHC.Types.Int | false}, {VV##1842 : [{VV##1837 : GHC.Types.Int | false}] | false}) | false}"
51:12-51:14::ps :: "{VV##1943 : GHC.Types.Int | false}"
51:16-51:18::sq :: "{VV##1408 : [GHC.Types.Int] | false}"
51:22-51:61::lq_anf$##7205759403792821639 :: "({v : GHC.Types.Int | false}, {v : [{v : GHC.Types.Int | false}] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
51:23-51:33::lq_anf$##7205759403792821637 :: "GHC.Types.Int"
51:31-51:33::sq :: "{VV##1408 : [GHC.Types.Int] | false}"
51:35-51:60::lq_anf$##7205759403792821638 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7dy}"
51:42-51:52::Lib.isPrimeOr1 :: "GHC.Types.Int -> GHC.Types.Bool"
51:53-51:60::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7dw}] | v == solnSet##a7dy\n                                               && len v >= 0}"
52:3-52:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
52:7-52:16::lq_anf$##7205759403792821641 :: "{v : GHC.Types.Bool | v <=> ps##a7fY <= x##a7dw}"
52:8-52:10::ps :: "{v : GHC.Types.Int | false}"
52:14-52:15::x :: "{v : GHC.Types.Int | v == x##a7dw}"
52:17-52:35::lq_anf$##7205759403792821643 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
52:18-52:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
52:25-52:34::lq_anf$##7205759403792821642 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
52:31-52:34::rsp :: "{v : ({v : GHC.Types.Int | false}, {v : [{v : GHC.Types.Int | false}] | false}) | false}"
52:36-52:72::lq_anf$##7205759403792821644 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text ({v : GHC.Types.Int | v >= 0\n                                                                                && 0 < v\n                                                                                && v <= x##a7dw}, {v : [{v : GHC.Types.Int | v == 1\n                                                                                                                             || (isPrime v\n                                                                                                                                 && 1 <= v\n                                                                                                                                 && v <= x##a7dw)\n                                                                                                                             && v >= 0\n                                                                                                                             && 0 < v}] | x##a7dw == 1\n                                                                                                                                          || product v == x##a7dw})))"
52:70-52:71::x :: "{v : GHC.Types.Int | v == x##a7dw}"
58:1-58:11::Lib.isPrimeOr1 :: "GHC.Types.Int -> GHC.Types.Bool"
58:12-58:13::n :: "GHC.Types.Int"
58:16-58:24::lq_anf$##7205759403792821629 :: "GHC.Types.Bool"
58:17-58:18::n :: "{v : GHC.Types.Int | v == n##a7dC}"
58:22-58:23::lq_anf$##7205759403792821628 :: "GHC.Types.Int"
58:28-58:37::lq_anf$##7205759403792821630 :: "GHC.Types.Bool"
58:36-58:37::n :: "{v : GHC.Types.Int | v == n##a7dC}"