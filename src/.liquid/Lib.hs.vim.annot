1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
43:1-43:15::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
43:16-43:17::x :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
43:20-43:21::x :: "{v : GHC.Types.Int | v == x##a8W4\n                     && v >= 0\n                     && 0 < v}"
43:25-43:26::lq_anf$##7205759403792829091 :: "GHC.Types.Int"
43:29-43:33::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
43:36-43:40::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
43:43-43:57::lq_anf$##7205759403792829144 :: "Data.Text.Internal.Text"
43:48-43:57::lq_anf$##7205759403792829143 :: "[GHC.Types.Char]"
44:20-44:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
44:27-44:35::lq_anf$##7205759403792829141 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
44:33-44:35::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
45:20-45:21::x :: "{v : GHC.Types.Int | v == x##a8W4\n                     && v >= 0\n                     && 0 < v}"
45:25-45:26::lq_anf$##7205759403792829097 :: "GHC.Types.Int"
46:3-46:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
46:11-46:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
46:22-46:28::lq_anf$##7205759403792829106 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x##a8W4\n                                      && x_Tuple22 v == x##a8W4}"
46:23-46:24::lq_anf$##7205759403792829105 :: "GHC.Types.Int"
46:26-46:27::x :: "{v : GHC.Types.Int | v == x##a8W4\n                     && v >= 0\n                     && 0 < v}"
47:3-47:4::x :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= seed##a8W6}])"
47:8-47:27::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
47:23-47:27::seed :: "{v : GHC.Types.Int | v == seed##a8W6\n                     && v >= 0\n                     && 0 < v}"
48:8-48:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= seed##a8W6}]) | v == x##a8W7}"
49:15-49:19::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
49:22-49:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
49:29-49:43::lq_anf$##7205759403792829110 :: "Data.Text.Internal.Text"
49:34-49:43::lq_anf$##7205759403792829109 :: "[GHC.Types.Char]"
50:17-50:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
50:24-50:28::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
50:31-50:45::lq_anf$##7205759403792829115 :: "Data.Text.Internal.Text"
50:36-50:45::lq_anf$##7205759403792829114 :: "[GHC.Types.Char]"
52:12-52:78::lq_anf$##7205759403792829132 :: "GHC.Types.Bool"
52:13-52:17::seed :: "{v : GHC.Types.Int | v == seed##a8W6\n                     && v >= 0\n                     && 0 < v}"
52:21-52:22::x :: "{v : GHC.Types.Int | v == x##a8W4\n                     && v >= 0\n                     && 0 < v}"
52:26-52:30::seed :: "{v : GHC.Types.Int | v == seed##a8W6\n                     && v >= 0\n                     && 0 < v}"
52:33-52:34::lq_anf$##7205759403792829119 :: "GHC.Types.Int"
52:38-52:40::x1 :: "{v : GHC.Types.Int | v == x1##a8W9\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a8W6}"
52:44-52:45::x :: "{v : GHC.Types.Int | v == x##a8W4\n                     && v >= 0\n                     && 0 < v}"
52:49-52:51::x1 :: "{v : GHC.Types.Int | v == x1##a8W9\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a8W6}"
52:54-52:55::lq_anf$##7205759403792829123 :: "GHC.Types.Int"
52:59-52:77::lq_anf$##7205759403792829128 :: "GHC.Types.Bool"
52:60-52:71::lq_anf$##7205759403792829125 :: "{v : GHC.Types.Int | v == seed##a8W6 - x1##a8W9}"
52:61-52:65::seed :: "{v : GHC.Types.Int | v == seed##a8W6\n                     && v >= 0\n                     && 0 < v}"
52:68-52:70::x1 :: "{v : GHC.Types.Int | v == x1##a8W9\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a8W6}"
52:75-52:76::lq_anf$##7205759403792829127 :: "GHC.Types.Int"
53:17-53:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
53:24-53:42::lq_anf$##7205759403792829139 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
53:30-53:42::lq_anf$##7205759403792829138 :: "{v : [GHC.Types.Int] | head v == seed##a8W6}"
53:31-53:35::seed :: "{v : GHC.Types.Int | v == seed##a8W6\n                     && v >= 0\n                     && 0 < v}"
53:38-53:41::ds_d9br :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= seed##a8W6}] | len v >= 0}"
54:18-54:22::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
54:25-54:29::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
54:32-54:46::lq_anf$##7205759403792829136 :: "Data.Text.Internal.Text"
54:37-54:46::lq_anf$##7205759403792829135 :: "[GHC.Types.Char]"
55:20-55:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
55:27-55:31::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
55:34-55:48::lq_anf$##7205759403792829102 :: "Data.Text.Internal.Text"
55:39-55:48::lq_anf$##7205759403792829101 :: "[GHC.Types.Char]"
62:1-62:32::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:33-62:34::x :: "GHC.Types.Int"
62:37-62:38::x :: "{v : GHC.Types.Int | v == x##a8Wa}"
62:42-62:43::lq_anf$##7205759403792829147 :: "GHC.Types.Int"
62:46-62:50::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:53-62:57::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
62:60-62:74::lq_anf$##7205759403792829194 :: "Data.Text.Internal.Text"
62:65-62:74::lq_anf$##7205759403792829193 :: "[GHC.Types.Char]"
63:37-63:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
63:44-63:58::lq_anf$##7205759403792829191 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
63:50-63:58::lq_anf$##7205759403792829190 :: "(GHC.Types.Int, [GHC.Types.Int])"
63:51-63:52::lq_anf$##7205759403792829185 :: "GHC.Types.Int"
63:54-63:57::lq_anf$##7205759403792829189 :: "[GHC.Types.Int]"
63:55-63:56::lq_anf$##7205759403792829187 :: "GHC.Types.Int"
64:37-64:38::x :: "{v : GHC.Types.Int | v == x##a8Wa}"
64:42-64:43::lq_anf$##7205759403792829153 :: "GHC.Types.Int"
65:3-65:4::m :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= x##a8Wa}])"
65:8-65:24::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
65:23-65:24::x :: "{v : GHC.Types.Int | v == x##a8Wa}"
66:8-66:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= x##a8Wa}]) | v == m##a8Wc}"
67:15-67:19::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
67:22-67:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
67:29-67:43::lq_anf$##7205759403792829163 :: "Data.Text.Internal.Text"
67:34-67:43::lq_anf$##7205759403792829162 :: "[GHC.Types.Char]"
68:25-68:93::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
68:29-68:38::lq_anf$##7205759403792829180 :: "{v : GHC.Types.Bool | v <=> ps##a981 <= x##a8Wa}"
68:30-68:32::ps :: "{v : GHC.Types.Int | v == ps##a981}"
68:36-68:37::x :: "{v : GHC.Types.Int | v == x##a8Wa}"
68:39-68:57::lq_anf$##7205759403792829182 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
68:40-68:44::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
68:47-68:56::lq_anf$##7205759403792829181 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
68:53-68:56::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a97Y}"
68:58-68:93::lq_anf$##7205759403792829183 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
68:91-68:92::x :: "{v : GHC.Types.Int | v == x##a8Wa}"
70:9-70:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
70:14-70:16::ps :: "GHC.Types.Int"
70:18-70:20::sq :: "[GHC.Types.Int]"
70:24-70:85::lq_anf$##7205759403792829178 :: "(GHC.Types.Int, [GHC.Types.Int])"
70:25-70:35::lq_anf$##7205759403792829165 :: "GHC.Types.Int"
70:33-70:35::sq :: "[GHC.Types.Int]"
70:37-70:38::lq_anf$##7205759403792829167 :: "GHC.Types.Int"
70:41-70:84::lq_anf$##7205759403792829176 :: "[GHC.Types.Int]"
70:42-70:43::ds_d9bT :: "GHC.Types.Int"
70:51-70:76::lq_anf$##7205759403792829175 :: "{v : [GHC.Types.Int] | len v <= len seqNumbers##a8Wd}"
70:58-70:65::lq_anf$##7205759403792829174 :: "GHC.Types.Int -> GHC.Types.Bool"
70:66-70:76::seqNumbers :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a8Wa}] | v == seqNumbers##a8Wd\n                                               && len v >= 0}"
70:78-70:79::ds_d9bT :: "GHC.Types.Int"
70:82-70:83::lq_anf$##7205759403792829170 :: "GHC.Types.Int"
71:37-71:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
71:44-71:48::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
71:51-71:65::lq_anf$##7205759403792829158 :: "Data.Text.Internal.Text"
71:56-71:65::lq_anf$##7205759403792829157 :: "[GHC.Types.Char]"
79:1-79:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
79:21-79:22::l :: "{v : GHC.Types.Int | v == l##a8Wi\n                     && v >= 0\n                     && 0 < v}"
79:26-79:27::u :: "{v : GHC.Types.Int | v == u##a8Wj\n                     && v >= 0\n                     && 0 < v}"
79:31-79:32::l :: "{v : GHC.Types.Int | v == l##a8Wi\n                     && v >= 0\n                     && 0 < v}"
79:35-79:36::lq_anf$##7205759403792829009 :: "GHC.Types.Int"
80:3-80:9::result :: "GHC.Types.Int"
80:13-80:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
80:23-80:29::lq_anf$##7205759403792829015 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a8Wi\n                                      && snd v == u##a8Wj\n                                      && x_Tuple21 v == l##a8Wi\n                                      && x_Tuple22 v == u##a8Wj}"
80:24-80:25::l :: "{v : GHC.Types.Int | v == l##a8Wi\n                     && v >= 0\n                     && 0 < v}"
80:27-80:28::u :: "{v : GHC.Types.Int | v == u##a8Wj\n                     && v >= 0\n                     && 0 < v}"
80:30-80:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
81:3-81:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
81:10-81:16::result :: "{v : GHC.Types.Int | v == result##a8Wk}"
81:23-81:24::u :: "{v : GHC.Types.Int | v == u##a8Wj\n                     && v >= 0\n                     && 0 < v}"
81:31-81:32::l :: "{v : GHC.Types.Int | v == l##a8Wi\n                     && v >= 0\n                     && 0 < v}"
82:16-82:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
82:20-82:32::lq_anf$##7205759403792829014 :: "[GHC.Types.Char]"
98:1-98:6::Lib.tests :: "{VV##3240 : [[GHC.Types.Char]] | len $VV##3240##k_ > 0\n                                 && len $VV##3240##k_ >= 0}"
98:9-98:12::lq_anf$##7205759403792829027 :: "[GHC.Types.Char]"
98:15-98:18::lq_anf$##7205759403792829029 :: "[GHC.Types.Char]"
98:21-98:90::lq_anf$##7205759403792829061 :: "{v : [[GHC.Types.Char]] | len $VV##3298##k_ >= 0}"
98:22-98:23::ds_d9ao :: "{v : [GHC.Types.Char] | len $VV##3271##k_ == len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3271##k_ == len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3271##k_ == strLen $lq_anf$##7205759403792829026##d9do##k_\n                        && len $VV##3271##k_ == strLen $lq_anf$##7205759403792829028##d9dq##k_\n                        && len $VV##3271##k_ > 0\n                        && len $VV##3271##k_ >= 0\n                        && len $VV##3271##k_ >= len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3271##k_ >= len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len v >= 0\n                        && len $VV##3271##k_ <= len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3271##k_ <= len $lq_anf$##7205759403792829029##d9dr##k_}"
98:27-98:28::ds_d9as :: "{v : [GHC.Types.Char] | $VV##3424##k_ /= $lq_anf$##7205759403792829027##d9dp##k_\n                        && $VV##3424##k_ /= $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3424##k_ >= 0\n                        && len v >= 0\n                        && len $VV##3424##k_ <= len $ds_d9an##k_\n                        && len $VV##3424##k_ <= len $ds_d9ao##k_\n                        && len $VV##3424##k_ <= len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3424##k_ <= len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3424##k_ <= len $lq_anf$##7205759403792829030##d9ds##k_}"
98:32-98:33::ds_d9aw :: "{v : [GHC.Types.Char] | len $VV##3596##k_ == len $ds_d9ao##k_\n                        && len $VV##3596##k_ == len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3596##k_ == len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3596##k_ == strLen $lq_anf$##7205759403792829026##d9do##k_\n                        && len $VV##3596##k_ == strLen $lq_anf$##7205759403792829028##d9dq##k_\n                        && $VV##3596##k_ /= $lq_anf$##7205759403792829027##d9dp##k_\n                        && $VV##3596##k_ /= $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3596##k_ > 0\n                        && len $VV##3596##k_ >= 0\n                        && len $VV##3596##k_ >= len $ds_d9ao##k_\n                        && len $VV##3596##k_ >= len $ds_d9as##k_\n                        && len $VV##3596##k_ >= len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3596##k_ >= len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len v >= 0\n                        && len $VV##3596##k_ <= len $ds_d9an##k_\n                        && len $VV##3596##k_ <= len $ds_d9ao##k_\n                        && len $VV##3596##k_ <= len $ds_d9ar##k_\n                        && len $VV##3596##k_ <= len $lq_anf$##7205759403792829027##d9dp##k_\n                        && len $VV##3596##k_ <= len $lq_anf$##7205759403792829029##d9dr##k_\n                        && len $VV##3596##k_ <= len $lq_anf$##7205759403792829030##d9ds##k_\n                        && len $VV##3596##k_ <= len $lq_anf$##7205759403792829031##d9dt##k_}"
98:41-98:51::lq_anf$##7205759403792829060 :: "[[GHC.Types.Char]]"
98:42-98:45::lq_anf$##7205759403792829055 :: "[GHC.Types.Char]"
98:47-98:50::lq_anf$##7205759403792829057 :: "[GHC.Types.Char]"
98:58-98:72::lq_anf$##7205759403792829053 :: "[[GHC.Types.Char]]"
98:59-98:62::lq_anf$##7205759403792829046 :: "[GHC.Types.Char]"
98:64-98:67::lq_anf$##7205759403792829048 :: "[GHC.Types.Char]"
98:69-98:71::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
98:79-98:89::lq_anf$##7205759403792829044 :: "[[GHC.Types.Char]]"
98:80-98:83::lq_anf$##7205759403792829039 :: "[GHC.Types.Char]"
98:85-98:88::lq_anf$##7205759403792829041 :: "[GHC.Types.Char]"
101:1-101:10::Lib.quicksort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV##849 : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | false} -> {VV##856 : [a] | false}"
101:16-101:18::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
102:22-102:33::smallSorted :: "{v : [a] | false}"
102:37-102:40::lq_anf$##7205759403792828966 :: "{v : [a] | head v == x##a8Wq}"
102:38-102:39::x :: "{VV : a | false}"
102:44-102:53::bigSorted :: "{v : [a] | false}"
104:5-104:16::smallSorted :: "{VV##856 : [a] | false}"
104:19-104:50::Lib.quicksort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV##849 : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | false} -> {VV##856 : [a] | false}"
104:29-104:50::lq_anf$##7205759403792828964 :: "{v : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | false}"
104:30-104:31::ds_d9ac :: "{VV : a | false}"
104:39-104:41::xs :: "{v : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | v == xs##a8Wr\n                                                     && len v >= 0}"
104:43-104:44::ds_d9ac :: "{VV : a | false}"
104:48-104:49::x :: "{VV : a | false}"
105:5-105:14::bigSorted :: "{VV##856 : [a] | false}"
105:17-105:47::Lib.quicksort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV##849 : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | false} -> {VV##856 : [a] | false}"
105:27-105:47::lq_anf$##7205759403792828959 :: "{v : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | false}"
105:28-105:29::ds_d9ag :: "{VV : a | false}"
105:37-105:39::xs :: "{v : [{VV : a | false}]<\\_ VV -> {VV : a | false}> | v == xs##a8Wr\n                                                     && len v >= 0}"
105:41-105:42::ds_d9ag :: "{VV : a | false}"
105:45-105:46::x :: "{VV : a | false}"
131:1-131:10::Lib.buildGrid :: "forall a . (GHC.Num.Num<[]> a) => [a] -> [a] -> [[(a, a)]]"
131:18-131:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
132:25-132:43::lq_anf$##7205759403792828972 :: "[(a, a)]"
132:26-132:32::lq_anf$##7205759403792828970 :: "{v : (a, a) | fst v == r##a8Wz\n              && x_Tuple21 v == r##a8Wz}"
132:27-132:28::r :: "{VV : a | VV == r##a8Wz}"
132:30-132:31::ds_d99S :: "a"
132:40-132:42::ds_d99J :: "{v : [a] | len v >= 0}"
132:46-132:61::lq_anf$##7205759403792828973 :: "[[(a, a)]]"
132:56-132:58::rs :: "{v : [a] | v == rs##a8WA\n           && len v >= 0}"
132:59-132:61::ds_d99J :: "{v : [a] | len v >= 0}"
148:1-148:9::Lib.indexedR :: "forall a . [a] -> [(GHC.Types.Int, a)]"
148:10-148:12::xs :: "[a]"
148:15-148:60::lq_anf$##7205759403792829085 :: "(GHC.Types.Int, a) -> (GHC.Types.Int, a)"
148:19-148:60::lq_anf$##7205759403792829082 :: "(GHC.Types.Int, a)"
148:36-148:59::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
148:37-148:46::lq_anf$##7205759403792829083 :: "{v : GHC.Types.Int | v == len xs##a8WF\n                     && v >= 0}"
148:44-148:46::xs :: "{v : [a] | v == xs##a8WF\n           && len v >= 0}"
148:49-148:53::indx :: "{v : GHC.Types.Int | v == indx##a8WG}"
148:55-148:58::val :: "{VV : a | VV == val##a8WH}"
148:63-148:73::lq_anf$##7205759403792829086 :: "[(GHC.Types.Int, a)]"
148:71-148:73::xs :: "{v : [a] | v == xs##a8WF\n           && len v >= 0}"
151:1-151:14::Lib.filterIndexed :: "forall a . (GHC.Types.Int -> a -> GHC.Types.Bool) -> [a] -> [a]"
151:15-151:16::p :: "GHC.Types.Int -> a -> GHC.Types.Bool"
151:17-151:19::xs :: "[a]"
151:23-151:24::x :: "{VV : a | VV == x##a8WL}"
151:34-151:44::lq_anf$##7205759403792828979 :: "[(GHC.Types.Int, a)]"
151:42-151:44::xs :: "{v : [a] | v == xs##a8WJ\n           && len v >= 0}"
151:46-151:51::lq_anf$##7205759403792828976 :: "GHC.Types.Bool"
151:48-151:49::i :: "{v : GHC.Types.Int | v == i##a8WK}"
151:50-151:51::x :: "{VV : a | VV == x##a8WL}"
154:1-154:7::Lib.myPred :: "((GHC.Types.Int, GHC.Types.Int), (GHC.Types.Int, GHC.Types.Int)) -> GHC.Types.Bool"
155:5-155:7::ip :: "{v : GHC.Types.Int | v == ip##a8WO}"
155:11-155:12::lq_anf$##7205759403792829200 :: "GHC.Types.Int"
155:15-155:19::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
156:17-156:22::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
158:1-158:13::Lib.replaceFirst :: "forall a . (GHC.Classes.Eq<[]> a) => a -> a -> [a] -> [a]"
158:14-158:18::elem :: "a"
158:19-158:20::y :: "a"
158:21-158:23::xs :: "[a]"
158:40-158:55::lq_anf$##7205759403792828981 :: "([a], [a])<\\x4 VV -> {v : [a] | len xs##a8WS == len x4 + len v}>"
158:46-158:52::lq_anf$##7205759403792828980 :: "v_B2:a -> {v : GHC.Types.Bool | v <=> v_B2 == y##a8WR}"
158:47-158:49::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
158:50-158:51::y :: "{VV : a | VV == y##a8WR}"
158:53-158:55::xs :: "{v : [a] | v == xs##a8WS\n           && len v >= 0}"
158:58-158:59::l :: "{v : [a] | v == l##a8WT\n           && len v >= 0}"
158:63-158:69::lq_anf$##7205759403792828985 :: "{v : [a] | head v == elem##a8WQ}"
158:64-158:68::elem :: "{VV : a | VV == elem##a8WQ}"
158:73-158:74::r :: "{v : [a] | v == r##a8WU\n           && len v >= 0}"
158:89-158:91::xs :: "{v : [a] | v == xs##a8WS\n           && len v >= 0}"