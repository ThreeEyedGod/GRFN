1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
36:1-36:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
36:21-36:22::l :: "{v : GHC.Types.Int | v == l##a7gP\n                     && v >= 0\n                     && 0 < v}"
36:26-36:27::u :: "{v : GHC.Types.Int | v == u##a7gQ\n                     && v >= 0\n                     && 0 < v}"
36:31-36:32::l :: "{v : GHC.Types.Int | v == l##a7gP\n                     && v >= 0\n                     && 0 < v}"
36:35-36:36::lq_anf$##7205759403792822311 :: "GHC.Types.Int"
37:3-37:9::result :: "GHC.Types.Int"
37:13-37:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
37:23-37:29::lq_anf$##7205759403792822317 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7gP\n                                      && snd v == u##a7gQ\n                                      && x_Tuple21 v == l##a7gP\n                                      && x_Tuple22 v == u##a7gQ}"
37:24-37:25::l :: "{v : GHC.Types.Int | v == l##a7gP\n                     && v >= 0\n                     && 0 < v}"
37:27-37:28::u :: "{v : GHC.Types.Int | v == u##a7gQ\n                     && v >= 0\n                     && 0 < v}"
37:30-37:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
38:3-38:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
38:10-38:16::result :: "{v : GHC.Types.Int | v == result##a7gR}"
38:23-38:24::u :: "{v : GHC.Types.Int | v == u##a7gQ\n                     && v >= 0\n                     && 0 < v}"
38:31-38:32::l :: "{v : GHC.Types.Int | v == l##a7gP\n                     && v >= 0\n                     && 0 < v}"
39:16-39:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
39:20-39:32::lq_anf$##7205759403792822316 :: "[GHC.Types.Char]"
46:1-46:9::Lib.makeList :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                  && 0 < VV##0}])"
46:14-46:21::lq_anf$##7205759403792822333 :: "{v : [GHC.Types.Int] | len v == 0}"
46:19-46:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
47:14-47:15::ds_d7sd :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
47:19-47:20::lq_anf$##7205759403792822323 :: "GHC.Types.Int"
48:3-48:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
48:11-48:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
48:22-48:28::lq_anf$##7205759403792822330 :: "(GHC.Types.Int, GHC.Types.Int)"
48:23-48:24::lq_anf$##7205759403792822329 :: "GHC.Types.Int"
48:26-48:27::ds_d7sd :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
49:3-49:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
49:8-49:16::lq_anf$##7205759403792822331 :: "v_B2:{VV##1135 : [GHC.Types.Int] | len $VV##1135##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7gT\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
49:9-49:13::seed :: "{v : GHC.Types.Int | v == seed##a7gT\n                     && v >= 0\n                     && 0 < v}"
49:17-49:32::lq_anf$##7205759403792822332 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v}])"
49:27-49:31::seed :: "{v : GHC.Types.Int | v == seed##a7gT\n                     && v >= 0\n                     && 0 < v}"
50:14-50:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
50:18-50:30::lq_anf$##7205759403792822327 :: "[GHC.Types.Char]"
57:1-57:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
57:34-57:35::x :: "GHC.Types.Int"
57:38-57:39::x :: "{v : GHC.Types.Int | v == x##a7gU}"
57:43-57:44::lq_anf$##7205759403792822335 :: "GHC.Types.Int"
57:47-57:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
57:54-57:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
57:61-57:75::lq_anf$##7205759403792822359 :: "Data.Text.Internal.Text"
57:66-57:75::lq_anf$##7205759403792822358 :: "[GHC.Types.Char]"
58:38-58:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
58:45-58:59::lq_anf$##7205759403792822356 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
58:51-58:59::lq_anf$##7205759403792822355 :: "(GHC.Types.Int, [GHC.Types.Int])"
58:52-58:53::lq_anf$##7205759403792822350 :: "GHC.Types.Int"
58:55-58:58::lq_anf$##7205759403792822354 :: "[GHC.Types.Int]"
58:56-58:57::lq_anf$##7205759403792822352 :: "GHC.Types.Int"
60:3-60:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v}]"
60:14-60:24::Lib.makeList :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                  && 0 < VV##0}])"
60:23-60:24::x :: "{v : GHC.Types.Int | v == x##a7gU}"
61:7-61:10::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
61:12-61:14::ps :: "GHC.Types.Int"
61:16-61:18::sq :: "[GHC.Types.Int]"
61:22-61:58::lq_anf$##7205759403792822343 :: "(GHC.Types.Int, [GHC.Types.Int])"
61:23-61:33::lq_anf$##7205759403792822340 :: "GHC.Types.Int"
61:31-61:33::sq :: "[GHC.Types.Int]"
61:35-61:57::lq_anf$##7205759403792822342 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7gW}"
61:42-61:49::lq_anf$##7205759403792822341 :: "GHC.Types.Int -> GHC.Types.Bool"
61:50-61:57::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | v == solnSet##a7gW\n                                        && len v >= 0}"
62:3-62:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
62:7-62:16::lq_anf$##7205759403792822345 :: "{v : GHC.Types.Bool | v <=> ps##a7j4 <= x##a7gU}"
62:8-62:10::ps :: "{v : GHC.Types.Int | v == ps##a7j4}"
62:14-62:15::x :: "{v : GHC.Types.Int | v == x##a7gU}"
62:17-62:35::lq_anf$##7205759403792822347 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:18-62:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:25-62:34::lq_anf$##7205759403792822346 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
62:31-62:34::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7j1}"
62:36-62:72::lq_anf$##7205759403792822348 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:70-62:71::x :: "{v : GHC.Types.Int | v == x##a7gU}"