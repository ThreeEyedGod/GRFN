1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
26:1-26:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
26:21-26:22::l :: "{v : GHC.Types.Int | v == l##a7ia\n                     && v >= 0\n                     && 0 < v}"
26:26-26:27::u :: "{v : GHC.Types.Int | v == u##a7ib\n                     && v >= 0\n                     && 0 < v}"
26:31-26:32::l :: "{v : GHC.Types.Int | v == l##a7ia\n                     && v >= 0\n                     && 0 < v}"
26:35-26:36::lq_anf$##7205759403792822305 :: "GHC.Types.Int"
26:39-26:44::lq_anf$##7205759403792822311 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7ia > x1 then l##a7ia else x1)}"
26:43-26:44::l :: "{v : GHC.Types.Int | v == l##a7ia\n                     && v >= 0\n                     && 0 < v}"
26:47-26:52::lq_anf$##7205759403792822312 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7ib < x1 then u##a7ib else x1)}"
26:51-26:52::u :: "{v : GHC.Types.Int | v == u##a7ib\n                     && v >= 0\n                     && 0 < v}"
26:57-26:86::lq_anf$##7205759403792822315 :: "(GHC.Types.IO GHC.Types.Int)"
26:67-26:73::lq_anf$##7205759403792822314 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7ia\n                                      && snd v == u##a7ib\n                                      && x_Tuple21 v == l##a7ia\n                                      && x_Tuple22 v == u##a7ib}"
26:68-26:69::l :: "{v : GHC.Types.Int | v == l##a7ia\n                     && v >= 0\n                     && 0 < v}"
26:71-26:72::u :: "{v : GHC.Types.Int | v == u##a7ib\n                     && v >= 0\n                     && 0 < v}"
26:74-26:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
27:16-27:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
27:20-27:32::lq_anf$##7205759403792822310 :: "[GHC.Types.Char]"
34:1-34:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
34:14-34:21::lq_anf$##7205759403792822330 :: "{v : [GHC.Types.Int] | len v == 0}"
34:19-34:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
35:14-35:15::ds_d7rS :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
35:18-35:19::lq_anf$##7205759403792822321 :: "GHC.Types.Int"
35:22-35:39::lq_anf$##7205759403792822329 :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
35:33-35:39::lq_anf$##7205759403792822328 :: "(GHC.Types.Int, GHC.Types.Int)"
35:34-35:35::lq_anf$##7205759403792822327 :: "GHC.Types.Int"
35:37-35:38::ds_d7rS :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
35:44-35:56::valConsApply :: "{v : GHC.Types.Int | $VV##1121##k_ /= 0\n                     && $VV##1121##k_ > 0\n                     && $VV##1121##k_ >= 0\n                     && 0 < $VV##1121##k_\n                     && 1 <= $VV##1121##k_\n                     && $VV##1121##k_ <= $ds_d7rS##k_\n                     && $VV##1121##k_ <= $ds_d7rV##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822316##d7ta##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822317##d7tb##k_} -> (GHC.Types.IO [GHC.Types.Int])"
37:5-37:17::valConsApply :: "{VV##1121 : GHC.Types.Int | $VV##1121##k_ /= 0\n                            && $VV##1121##k_ > 0\n                            && $VV##1121##k_ >= 0\n                            && 0 < $VV##1121##k_\n                            && 1 <= $VV##1121##k_\n                            && $VV##1121##k_ <= $ds_d7rS##k_\n                            && $VV##1121##k_ <= $ds_d7rV##k_\n                            && $VV##1121##k_ <= $lq_anf$##7205759403792822316##d7ta##k_\n                            && $VV##1121##k_ <= $lq_anf$##7205759403792822317##d7tb##k_} -> (GHC.Types.IO [GHC.Types.Int])"
37:18-37:22::seed :: "{VV##1121 : GHC.Types.Int | $VV##1121##k_ /= 0\n                            && $VV##1121##k_ > 0\n                            && $VV##1121##k_ >= 0\n                            && 0 < $VV##1121##k_\n                            && 1 <= $VV##1121##k_\n                            && $VV##1121##k_ <= $ds_d7rS##k_\n                            && $VV##1121##k_ <= $ds_d7rV##k_\n                            && $VV##1121##k_ <= $lq_anf$##7205759403792822316##d7ta##k_\n                            && $VV##1121##k_ <= $lq_anf$##7205759403792822317##d7tb##k_}"
37:25-37:33::lq_anf$##7205759403792822318 :: "v_B2:{VV##1176 : [GHC.Types.Int] | len $VV##1176##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7ie\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
37:26-37:30::seed :: "{v : GHC.Types.Int | v == seed##a7ie\n                     && $VV##1121##k_ /= 0\n                     && $VV##1121##k_ > 0\n                     && $VV##1121##k_ >= 0\n                     && 0 < $VV##1121##k_\n                     && 1 <= $VV##1121##k_\n                     && $VV##1121##k_ <= $ds_d7rS##k_\n                     && $VV##1121##k_ <= $ds_d7rV##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822316##d7ta##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822317##d7tb##k_}"
37:38-37:51::lq_anf$##7205759403792822319 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7ie}])"
37:47-37:51::seed :: "{v : GHC.Types.Int | v == seed##a7ie\n                     && $VV##1121##k_ /= 0\n                     && $VV##1121##k_ > 0\n                     && $VV##1121##k_ >= 0\n                     && 0 < $VV##1121##k_\n                     && 1 <= $VV##1121##k_\n                     && $VV##1121##k_ <= $ds_d7rS##k_\n                     && $VV##1121##k_ <= $ds_d7rV##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822316##d7ta##k_\n                     && $VV##1121##k_ <= $lq_anf$##7205759403792822317##d7tb##k_}"
38:14-38:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
38:18-38:30::lq_anf$##7205759403792822325 :: "[GHC.Types.Char]"
45:1-45:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:34-45:35::x :: "GHC.Types.Int"
45:38-45:39::x :: "{v : GHC.Types.Int | v == x##a7if}"
45:43-45:44::lq_anf$##7205759403792822332 :: "GHC.Types.Int"
45:47-45:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:54-45:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
45:61-45:75::lq_anf$##7205759403792822357 :: "Data.Text.Internal.Text"
45:66-45:75::lq_anf$##7205759403792822356 :: "[GHC.Types.Char]"
46:38-46:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
46:45-46:59::lq_anf$##7205759403792822354 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
46:51-46:59::lq_anf$##7205759403792822353 :: "(GHC.Types.Int, [GHC.Types.Int])"
46:52-46:53::lq_anf$##7205759403792822348 :: "GHC.Types.Int"
46:55-46:58::lq_anf$##7205759403792822352 :: "[GHC.Types.Int]"
46:56-46:57::lq_anf$##7205759403792822350 :: "GHC.Types.Int"
47:38-47:48::lq_anf$##7205759403792822345 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= x##a7if}])"
47:47-47:48::x :: "{v : GHC.Types.Int | v == x##a7if}"
47:53-47:69::lq_anf$##7205759403792822346 :: "[GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
47:68-47:69::x :: "{v : GHC.Types.Int | v == x##a7if}"
49:5-49:19::haltOrContinue :: "GHC.Types.Int -> [GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:20-49:22::n' :: "GHC.Types.Int"
49:23-49:30::solnSet :: "[GHC.Types.Int]"
50:9-50:11::lq_anf$##7205759403792822341 :: "GHC.Types.Int"
50:15-50:17::n' :: "{v : GHC.Types.Int | v == n'##a7ii}"
50:20-50:24::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
50:27-50:39::lq_anf$##7205759403792822344 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
50:33-50:39::result :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == result##a7l0}"
51:21-51:56::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:54-51:56::n' :: "{v : GHC.Types.Int | v == n'##a7ii}"
53:9-53:15::result :: "(GHC.Types.Int, [GHC.Types.Int])"
53:21-53:23::sq :: "{VV##1588 : [GHC.Types.Int] | false}"
53:27-53:66::lq_anf$##7205759403792822339 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
53:28-53:38::lq_anf$##7205759403792822337 :: "GHC.Types.Int"
53:36-53:38::sq :: "{VV##1588 : [GHC.Types.Int] | false}"
53:40-53:65::lq_anf$##7205759403792822338 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7ij}"
53:47-53:57::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
53:58-53:65::solnSet :: "{v : [GHC.Types.Int] | v == solnSet##a7ij\n                       && len v >= 0}"
59:1-59:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
59:12-59:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
59:16-59:17::n :: "{v : GHC.Types.Int | v == n##a7in\n                     && v >= 0\n                     && 0 < v}"
59:20-59:21::lq_anf$##7205759403792822293 :: "GHC.Types.Int"
59:24-59:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
59:28-59:40::lq_anf$##7205759403792822301 :: "[GHC.Types.Char]"
60:16-60:24::lq_anf$##7205759403792822298 :: "GHC.Types.Bool"
60:17-60:18::n :: "{v : GHC.Types.Int | v == n##a7in\n                     && v >= 0\n                     && 0 < v}"
60:22-60:23::lq_anf$##7205759403792822297 :: "GHC.Types.Int"
60:28-60:37::lq_anf$##7205759403792822299 :: "GHC.Types.Bool"
60:36-60:37::n :: "{v : GHC.Types.Int | v == n##a7in\n                     && v >= 0\n                     && 0 < v}"