1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
21:1-21:31::Lib.genARandomPreFactoredNumberLEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
21:32-21:33::x :: "GHC.Types.Int"
21:36-21:37::x :: "{v : GHC.Types.Int | v == x}"
21:41-21:42::lq_anf$##7205759403792817807 :: "GHC.Types.Int"
21:45-21:49::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
21:52-21:56::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
21:59-21:73::lq_anf$##7205759403792817847 :: "Data.Text.Internal.Text"
21:64-21:73::lq_anf$##7205759403792817846 :: "[GHC.Types.Char]"
22:36-22:40::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
22:43-22:57::lq_anf$##7205759403792817844 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
22:49-22:57::lq_anf$##7205759403792817843 :: "(GHC.Types.Int, [GHC.Types.Int])"
22:50-22:51::lq_anf$##7205759403792817838 :: "GHC.Types.Int"
22:53-22:56::lq_anf$##7205759403792817842 :: "[GHC.Types.Int]"
22:54-22:55::lq_anf$##7205759403792817840 :: "GHC.Types.Int"
23:36-23:37::x :: "{v : GHC.Types.Int | v == x}"
23:41-23:42::lq_anf$##7205759403792817813 :: "GHC.Types.Int"
24:3-24:7::rndM :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                          && v > 0\n                                                          && v >= 0\n                                                          && 0 < v\n                                                          && 2 <= v})"
24:11-24:49::_ :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                                        && v > 0\n                                                                        && v >= 0\n                                                                        && 0 < v\n                                                                        && 2 <= v}))"
24:16-24:29::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | 2 <= v})"
24:30-24:49::lq_anf$##7205759403792817823 :: "(GHC.Types.IO GHC.Types.Int)"
24:42-24:48::lq_anf$##7205759403792817822 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x\n                                      && x_Tuple22 v == x}"
24:43-24:44::lq_anf$##7205759403792817821 :: "GHC.Types.Int"
24:46-24:47::x :: "{v : GHC.Types.Int | v == x}"
25:8-25:12::_ :: "{v : (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                               && v > 0\n                                                               && v >= 0\n                                                               && 0 < v\n                                                               && 2 <= v}) | v == rndM}"
26:15-26:19::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
26:22-26:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
26:29-26:43::lq_anf$##7205759403792817827 :: "Data.Text.Internal.Text"
26:34-26:43::lq_anf$##7205759403792817826 :: "[GHC.Types.Char]"
27:20-27:88::Data.Bool.bool :: "{VV : forall a . a -> a -> GHC.Types.Bool -> a | VV == bool}"
27:25-27:59::lq_anf$##7205759403792817833 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
27:57-27:58::x :: "{v : GHC.Types.Int | v == x}"
27:60-27:78::lq_anf$##7205759403792817835 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
27:61-27:65::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
27:68-27:77::lq_anf$##7205759403792817834 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
27:74-27:77::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp}"
27:79-27:88::lq_anf$##7205759403792817836 :: "{v : GHC.Types.Bool | v <=> ps <= x}"
27:80-27:82::ps :: "{v : GHC.Types.Int | v == ps}"
27:86-27:87::x :: "{v : GHC.Types.Int | v == x}"
29:9-29:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
29:14-29:16::ps :: "GHC.Types.Int"
29:18-29:20::sq :: "{VV : [GHC.Types.Int] | false}"
29:24-29:53::lq_anf$##7205759403792817831 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
29:25-29:35::lq_anf$##7205759403792817829 :: "GHC.Types.Int"
29:33-29:35::sq :: "{VV : [GHC.Types.Int] | false}"
29:37-29:52::lq_anf$##7205759403792817830 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
29:47-29:52::upper :: "{v : GHC.Types.Int | v == upper\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
30:36-30:40::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
30:43-30:47::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
30:50-30:64::lq_anf$##7205759403792817818 :: "Data.Text.Internal.Text"
30:55-30:64::lq_anf$##7205759403792817817 :: "[GHC.Types.Char]"
36:1-36:10::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
36:15-36:18::lq_anf$##7205759403792817803 :: "{v : [GHC.Types.Int] | len v == 0}"
36:16-36:17::lq_anf$##7205759403792817802 :: "GHC.Types.Int"
37:15-37:16::ds_d64S :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:20-37:21::lq_anf$##7205759403792817791 :: "GHC.Types.Int"
37:29-37:48::_ :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                                           && 0 < v})"
37:51-37:65::lq_anf$##7205759403792817796 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:64-37:65::ds_d64S :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
38:13-38:24::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
38:23-38:24::lq_anf$##7205759403792817800 :: "GHC.Types.Int"
39:16-39:31::Lib.lstPrimesLE :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> {v : [{v : GHC.Types.Int | v >= 0\n                                                             && 0 < v}] | 1 <= len v}"
39:28-39:31::okN :: "{v : GHC.Types.Int | v == okN\n                     && v >= 0\n                     && 0 < v}"
40:15-40:31::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
40:19-40:31::lq_anf$##7205759403792817795 :: "[GHC.Types.Char]"
44:1-44:12::Lib.lstPrimesLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
44:17-44:20::lq_anf$##7205759403792817773 :: "{v : [GHC.Types.Int] | len v == 0}"
44:18-44:19::lq_anf$##7205759403792817772 :: "GHC.Types.Int"
45:17-45:18::ds_d64C :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:22-45:23::lq_anf$##7205759403792817752 :: "GHC.Types.Int"
45:26-45:27::lq_anf$##7205759403792817758 :: "GHC.Types.Int"
45:30-45:67::lq_anf$##7205759403792817770 :: "{v : [{v : GHC.Types.Int | v /= 0\n                           && v > 0\n                           && v >= 0\n                           && 0 < v}] | len v >= 0}"
45:31-45:32::ds_d64J :: "GHC.Types.Int"
45:40-45:48::lq_anf$##7205759403792817769 :: "[GHC.Types.Int]"
45:41-45:42::lq_anf$##7205759403792817768 :: "GHC.Types.Int"
45:46-45:47::ds_d64C :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:50-45:51::ds_d64J :: "GHC.Types.Int"
45:54-45:55::lq_anf$##7205759403792817761 :: "GHC.Types.Int"
45:57-45:66::lq_anf$##7205759403792817764 :: "GHC.Types.Bool"
45:65-45:66::ds_d64J :: "GHC.Types.Int"
46:17-46:33::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
46:21-46:33::lq_anf$##7205759403792817756 :: "[GHC.Types.Char]"
53:1-53:13::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
53:18-53:19::lq_anf$##7205759403792817787 :: "{v : GHC.Prim.Int# | v == 1}"
54:18-54:27::lq_anf$##7205759403792817776 :: "GHC.Types.Bool"
54:26-54:27::ds_d62X :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
54:30-54:31::ds_d62X :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
55:18-55:19::ds_d62X :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
55:22-55:23::lq_anf$##7205759403792817779 :: "GHC.Types.Int"
55:26-55:46::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
55:39-55:46::lq_anf$##7205759403792817786 :: "GHC.Types.Int"
55:40-55:41::ds_d62X :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
55:44-55:45::lq_anf$##7205759403792817785 :: "GHC.Types.Int"
56:18-56:34::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
56:22-56:34::lq_anf$##7205759403792817783 :: "[GHC.Types.Char]"
61:1-61:11::Lib.getRndMInt :: "({VV : GHC.Types.Int | VV /= 0\n                       && VV > 0\n                       && VV >= 0\n                       && 0 < VV\n                       && 2 <= VV}, {VV : GHC.Types.Int | VV /= 0\n                                                          && VV > 0\n                                                          && VV >= 0\n                                                          && 0 < VV\n                                                          && 2 <= VV})<\\x1 VV -> {VV : GHC.Types.Int | VV /= 0\n                                                                                                       && VV > 0\n                                                                                                       && VV >= 0\n                                                                                                       && VV >= x1\n                                                                                                       && 0 < VV\n                                                                                                       && 2 <= VV}> -> (GHC.Types.IO GHC.Types.Int)"
61:21-61:60::$dStatefulGen_a3yJ :: "{v : (System.Random.Internal.StatefulGen (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) GHC.Types.IO) | v == $dStatefulGen_a3yJ}"
61:31-61:37::lq_anf$##7205759403792817805 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l\n                                      && snd v == u\n                                      && x_Tuple21 v == l\n                                      && x_Tuple22 v == u}"
61:32-61:33::l :: "{v : GHC.Types.Int | v == l\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
61:35-61:36::u :: "{v : GHC.Types.Int | v == u\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && v >= l\n                     && 0 < v\n                     && 2 <= v}"
61:38-61:50::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"