1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
26:1-26:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
26:21-26:22::l :: "{v : GHC.Types.Int | v == l##a7jS\n                     && v >= 0\n                     && 0 < v}"
26:26-26:27::u :: "{v : GHC.Types.Int | v == u##a7jT\n                     && v >= 0\n                     && 0 < v}"
26:31-26:32::l :: "{v : GHC.Types.Int | v == l##a7jS\n                     && v >= 0\n                     && 0 < v}"
26:35-26:36::lq_anf$##7205759403792822384 :: "GHC.Types.Int"
26:39-26:44::lq_anf$##7205759403792822390 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7jS > x1 then l##a7jS else x1)}"
26:43-26:44::l :: "{v : GHC.Types.Int | v == l##a7jS\n                     && v >= 0\n                     && 0 < v}"
26:47-26:52::lq_anf$##7205759403792822391 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7jT < x1 then u##a7jT else x1)}"
26:51-26:52::u :: "{v : GHC.Types.Int | v == u##a7jT\n                     && v >= 0\n                     && 0 < v}"
26:57-26:86::lq_anf$##7205759403792822394 :: "(GHC.Types.IO GHC.Types.Int)"
26:67-26:73::lq_anf$##7205759403792822393 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7jS\n                                      && snd v == u##a7jT\n                                      && x_Tuple21 v == l##a7jS\n                                      && x_Tuple22 v == u##a7jT}"
26:68-26:69::l :: "{v : GHC.Types.Int | v == l##a7jS\n                     && v >= 0\n                     && 0 < v}"
26:71-26:72::u :: "{v : GHC.Types.Int | v == u##a7jT\n                     && v >= 0\n                     && 0 < v}"
26:74-26:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
27:16-27:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
27:20-27:32::lq_anf$##7205759403792822389 :: "[GHC.Types.Char]"
34:1-34:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
34:14-34:21::lq_anf$##7205759403792822409 :: "{v : [GHC.Types.Int] | len v == 0}"
34:19-34:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
35:14-35:15::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
35:18-35:19::lq_anf$##7205759403792822400 :: "GHC.Types.Int"
35:22-35:39::lq_anf$##7205759403792822408 :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
35:33-35:39::lq_anf$##7205759403792822407 :: "(GHC.Types.Int, GHC.Types.Int)"
35:34-35:35::lq_anf$##7205759403792822406 :: "GHC.Types.Int"
35:37-35:38::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
35:44-35:52::joinPass :: "{v : GHC.Types.Int | $VV##1128##k_ /= 0\n                     && $VV##1128##k_ > 0\n                     && $VV##1128##k_ >= 0\n                     && 0 < $VV##1128##k_\n                     && 1 <= $VV##1128##k_\n                     && $VV##1128##k_ <= $ds_d7tf##k_\n                     && $VV##1128##k_ <= $ds_d7ti##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822395##d7ur##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822396##d7us##k_} -> (GHC.Types.IO [GHC.Types.Int])"
36:15-36:23::joinPass :: "{VV##1128 : GHC.Types.Int | $VV##1128##k_ /= 0\n                            && $VV##1128##k_ > 0\n                            && $VV##1128##k_ >= 0\n                            && 0 < $VV##1128##k_\n                            && 1 <= $VV##1128##k_\n                            && $VV##1128##k_ <= $ds_d7tf##k_\n                            && $VV##1128##k_ <= $ds_d7ti##k_\n                            && $VV##1128##k_ <= $lq_anf$##7205759403792822395##d7ur##k_\n                            && $VV##1128##k_ <= $lq_anf$##7205759403792822396##d7us##k_} -> (GHC.Types.IO [GHC.Types.Int])"
36:24-36:28::seed :: "{VV##1128 : GHC.Types.Int | $VV##1128##k_ /= 0\n                            && $VV##1128##k_ > 0\n                            && $VV##1128##k_ >= 0\n                            && 0 < $VV##1128##k_\n                            && 1 <= $VV##1128##k_\n                            && $VV##1128##k_ <= $ds_d7tf##k_\n                            && $VV##1128##k_ <= $ds_d7ti##k_\n                            && $VV##1128##k_ <= $lq_anf$##7205759403792822395##d7ur##k_\n                            && $VV##1128##k_ <= $lq_anf$##7205759403792822396##d7us##k_}"
36:31-36:39::lq_anf$##7205759403792822397 :: "v_B2:{VV##1183 : [GHC.Types.Int] | len $VV##1183##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7jW\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
36:32-36:36::seed :: "{v : GHC.Types.Int | v == seed##a7jW\n                     && $VV##1128##k_ /= 0\n                     && $VV##1128##k_ > 0\n                     && $VV##1128##k_ >= 0\n                     && 0 < $VV##1128##k_\n                     && 1 <= $VV##1128##k_\n                     && $VV##1128##k_ <= $ds_d7tf##k_\n                     && $VV##1128##k_ <= $ds_d7ti##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822395##d7ur##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822396##d7us##k_}"
36:44-36:57::lq_anf$##7205759403792822398 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7jW}])"
36:53-36:57::seed :: "{v : GHC.Types.Int | v == seed##a7jW\n                     && $VV##1128##k_ /= 0\n                     && $VV##1128##k_ > 0\n                     && $VV##1128##k_ >= 0\n                     && 0 < $VV##1128##k_\n                     && 1 <= $VV##1128##k_\n                     && $VV##1128##k_ <= $ds_d7tf##k_\n                     && $VV##1128##k_ <= $ds_d7ti##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822395##d7ur##k_\n                     && $VV##1128##k_ <= $lq_anf$##7205759403792822396##d7us##k_}"
37:14-37:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
37:18-37:30::lq_anf$##7205759403792822404 :: "[GHC.Types.Char]"
44:1-44:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
44:34-44:35::x :: "GHC.Types.Int"
44:38-44:39::x :: "{v : GHC.Types.Int | v == x##a7jX}"
44:43-44:44::lq_anf$##7205759403792822411 :: "GHC.Types.Int"
44:47-44:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
44:54-44:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
44:61-44:75::lq_anf$##7205759403792822434 :: "Data.Text.Internal.Text"
44:66-44:75::lq_anf$##7205759403792822433 :: "[GHC.Types.Char]"
45:38-45:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:45-45:59::lq_anf$##7205759403792822431 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
45:51-45:59::lq_anf$##7205759403792822430 :: "(GHC.Types.Int, [GHC.Types.Int])"
45:52-45:53::lq_anf$##7205759403792822425 :: "GHC.Types.Int"
45:55-45:58::lq_anf$##7205759403792822429 :: "[GHC.Types.Int]"
45:56-45:57::lq_anf$##7205759403792822427 :: "GHC.Types.Int"
47:3-47:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7jX}]"
47:14-47:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
47:23-47:24::x :: "{v : GHC.Types.Int | v == x##a7jX}"
48:7-48:10::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
48:12-48:14::ps :: "GHC.Types.Int"
48:16-48:18::sq :: "{VV##1595 : [GHC.Types.Int] | false}"
48:22-48:61::lq_anf$##7205759403792822418 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
48:23-48:33::lq_anf$##7205759403792822416 :: "GHC.Types.Int"
48:31-48:33::sq :: "{VV##1595 : [GHC.Types.Int] | false}"
48:35-48:60::lq_anf$##7205759403792822417 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7jZ}"
48:42-48:52::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
48:53-48:60::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7jX}] | v == solnSet##a7jZ\n                                               && len v >= 0}"
49:3-49:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
49:7-49:16::lq_anf$##7205759403792822420 :: "{v : GHC.Types.Bool | v <=> ps##a7mD <= x##a7jX}"
49:8-49:10::ps :: "{v : GHC.Types.Int | v == ps##a7mD}"
49:14-49:15::x :: "{v : GHC.Types.Int | v == x##a7jX}"
49:17-49:35::lq_anf$##7205759403792822422 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:18-49:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:25-49:34::lq_anf$##7205759403792822421 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
49:31-49:34::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7mA}"
49:36-49:72::lq_anf$##7205759403792822423 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:70-49:71::x :: "{v : GHC.Types.Int | v == x##a7jX}"
55:1-55:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
55:12-55:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
55:16-55:17::n :: "{v : GHC.Types.Int | v == n##a7k3\n                     && v >= 0\n                     && 0 < v}"
55:20-55:21::lq_anf$##7205759403792822372 :: "GHC.Types.Int"
55:24-55:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
55:28-55:40::lq_anf$##7205759403792822380 :: "[GHC.Types.Char]"
56:16-56:24::lq_anf$##7205759403792822377 :: "GHC.Types.Bool"
56:17-56:18::n :: "{v : GHC.Types.Int | v == n##a7k3\n                     && v >= 0\n                     && 0 < v}"
56:22-56:23::lq_anf$##7205759403792822376 :: "GHC.Types.Int"
56:28-56:37::lq_anf$##7205759403792822378 :: "GHC.Types.Bool"
56:36-56:37::n :: "{v : GHC.Types.Int | v == n##a7k3\n                     && v >= 0\n                     && 0 < v}"