1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
39:1-39:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
39:21-39:22::l :: "{v : GHC.Types.Int | v == l##a7tX\n                     && v >= 0\n                     && 0 < v}"
39:26-39:27::u :: "{v : GHC.Types.Int | v == u##a7tY\n                     && v >= 0\n                     && 0 < v}"
39:31-39:32::l :: "{v : GHC.Types.Int | v == l##a7tX\n                     && v >= 0\n                     && 0 < v}"
39:35-39:36::lq_anf$##7205759403792823721 :: "GHC.Types.Int"
39:39-39:44::lq_anf$##7205759403792823727 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7tX > x1 then l##a7tX else x1)}"
39:43-39:44::l :: "{v : GHC.Types.Int | v == l##a7tX\n                     && v >= 0\n                     && 0 < v}"
39:47-39:52::lq_anf$##7205759403792823728 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7tY < x1 then u##a7tY else x1)}"
39:51-39:52::u :: "{v : GHC.Types.Int | v == u##a7tY\n                     && v >= 0\n                     && 0 < v}"
39:57-39:86::lq_anf$##7205759403792823731 :: "(GHC.Types.IO GHC.Types.Int)"
39:67-39:73::lq_anf$##7205759403792823730 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7tX\n                                      && snd v == u##a7tY\n                                      && x_Tuple21 v == l##a7tX\n                                      && x_Tuple22 v == u##a7tY}"
39:68-39:69::l :: "{v : GHC.Types.Int | v == l##a7tX\n                     && v >= 0\n                     && 0 < v}"
39:71-39:72::u :: "{v : GHC.Types.Int | v == u##a7tY\n                     && v >= 0\n                     && 0 < v}"
39:74-39:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
40:16-40:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
40:20-40:32::lq_anf$##7205759403792823726 :: "[GHC.Types.Char]"
51:1-51:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
51:14-51:21::lq_anf$##7205759403792823772 :: "{v : [GHC.Types.Int] | len v == 0}"
51:19-51:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
52:14-52:15::ds_d7Nj :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
52:18-52:19::lq_anf$##7205759403792823764 :: "GHC.Types.Int"
52:22-52:55::GHC.Base.$fMonadIO :: "{v : (GHC.Base.Monad GHC.Types.IO) | v == $fMonadIO}"
52:23-52:33::Lib.getRndMInt :: "x1:{v : ({v : GHC.Types.Int | v >= 0\n                              && 0 < v}, {v : GHC.Types.Int | v >= 0\n                                                              && 0 < v}) | fst v > 0\n                                                                           && fst v <= snd v} -> (GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                                                                                                                    && v >= fst x1\n                                                                                                                                    && 0 < v\n                                                                                                                                    && v <= snd x1})"
52:39-52:47::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
52:49-52:55::lq_anf$##7205759403792823771 :: "(GHC.Types.Int, GHC.Types.Int)"
52:50-52:51::lq_anf$##7205759403792823770 :: "GHC.Types.Int"
52:53-52:54::ds_d7Nj :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
53:14-53:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
53:18-53:30::lq_anf$##7205759403792823768 :: "[GHC.Types.Char]"
60:1-60:2::f :: "a -> b c"
60:3-60:7::Lib.>=>: :: "forall a b c .\n(GHC.Base.Monad<[]> a) =>\n(b -> a c) -> (c -> a {VV##841 : [{VV : c | $VV##836##k_ <= $lq_tmp$x##831##k_}] | len $VV##841##k_ >= 0}) -> b -> a [c]"
60:8-60:9::g :: "a -> b {VV##841 : [{VV : a | $VV##836##k_ <= $lq_tmp$x##831##k_}] | len $VV##841##k_ >= 0}"
60:12-60:13::f :: "a -> b c"
60:18-60:37::$dFunctor_a7D6 :: "{v : (GHC.Base.Functor a) | v == $dFunctor_a7D6}"
60:19-60:20::u :: "a"
60:24-60:29::lq_anf$##7205759403792823626 :: "v_B2:{VV##938 : [a] | len $VV##938##k_ >= 0} -> {v : [a] | head v == u##a7u2\n                                                           && len v == 1 + len v_B2\n                                                           && tail v == v_B2}"
60:25-60:26::u :: "{VV : a | VV == u##a7u2}"
60:34-60:37::lq_anf$##7205759403792823627 :: "a {v : [{VV : b | $VV##836##k_ <= $lq_tmp$x##831##k_}] | len $VV##841##k_ >= 0}"
60:36-60:37::u :: "{VV : a | VV == u##a7u2}"
86:1-86:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
86:34-86:35::x :: "GHC.Types.Int"
86:38-86:39::x :: "{v : GHC.Types.Int | v == x##a7u7}"
86:43-86:44::lq_anf$##7205759403792823778 :: "GHC.Types.Int"
86:47-86:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
86:54-86:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
86:61-86:75::lq_anf$##7205759403792823803 :: "Data.Text.Internal.Text"
86:66-86:75::lq_anf$##7205759403792823802 :: "[GHC.Types.Char]"
87:38-87:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
87:45-87:59::lq_anf$##7205759403792823800 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
87:51-87:59::lq_anf$##7205759403792823799 :: "(GHC.Types.Int, [GHC.Types.Int])"
87:52-87:53::lq_anf$##7205759403792823794 :: "GHC.Types.Int"
87:55-87:58::lq_anf$##7205759403792823798 :: "[GHC.Types.Int]"
87:56-87:57::lq_anf$##7205759403792823796 :: "GHC.Types.Int"
88:38-88:48::lq_anf$##7205759403792823791 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= x##a7u7}])"
88:47-88:48::x :: "{v : GHC.Types.Int | v == x##a7u7}"
88:53-88:69::lq_anf$##7205759403792823792 :: "[GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
88:68-88:69::x :: "{v : GHC.Types.Int | v == x##a7u7}"
90:5-90:19::haltOrContinue :: "GHC.Types.Int -> [GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
90:20-90:22::n' :: "GHC.Types.Int"
90:23-90:30::solnSet :: "[GHC.Types.Int]"
91:9-91:11::lq_anf$##7205759403792823787 :: "GHC.Types.Int"
91:15-91:17::n' :: "{v : GHC.Types.Int | v == n'##a7ua}"
91:20-91:24::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
91:27-91:39::lq_anf$##7205759403792823790 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
91:33-91:39::result :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == result##a7EH}"
92:21-92:56::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
92:54-92:56::n' :: "{v : GHC.Types.Int | v == n'##a7ua}"
94:9-94:15::result :: "(GHC.Types.Int, [GHC.Types.Int])"
94:21-94:23::sq :: "{VV##2981 : [GHC.Types.Int] | false}"
94:27-94:66::lq_anf$##7205759403792823785 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
94:28-94:38::lq_anf$##7205759403792823783 :: "GHC.Types.Int"
94:36-94:38::sq :: "{VV##2981 : [GHC.Types.Int] | false}"
94:40-94:65::lq_anf$##7205759403792823784 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7ub}"
94:47-94:57::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
94:58-94:65::solnSet :: "{v : [GHC.Types.Int] | v == solnSet##a7ub\n                       && len v >= 0}"
100:1-100:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
100:12-100:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
100:16-100:17::n :: "{v : GHC.Types.Int | v == n##a7uf\n                     && v >= 0\n                     && 0 < v}"
100:20-100:21::lq_anf$##7205759403792823637 :: "GHC.Types.Int"
100:24-100:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
100:28-100:40::lq_anf$##7205759403792823645 :: "[GHC.Types.Char]"
101:16-101:24::lq_anf$##7205759403792823642 :: "GHC.Types.Bool"
101:17-101:18::n :: "{v : GHC.Types.Int | v == n##a7uf\n                     && v >= 0\n                     && 0 < v}"
101:22-101:23::lq_anf$##7205759403792823641 :: "GHC.Types.Int"
101:28-101:37::lq_anf$##7205759403792823643 :: "GHC.Types.Bool"
101:36-101:37::n :: "{v : GHC.Types.Int | v == n##a7uf\n                     && v >= 0\n                     && 0 < v}"
105:1-105:8::Lib.getName :: "(GHC.Types.IO [GHC.Types.Char])"
105:11-105:15::lq_anf$##7205759403792823750 :: "[GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]"
105:20-105:32::lq_anf$##7205759403792823753 :: "(GHC.Types.IO [GHC.Types.Char])"
105:24-105:32::lq_anf$##7205759403792823752 :: "[GHC.Types.Char]"
105:37-105:66::lq_anf$##7205759403792823759 :: "(GHC.Types.IO [GHC.Types.Char])"
105:38-105:45::lq_anf$##7205759403792823755 :: "v_B2:[GHC.Types.Char] -> {v : [GHC.Types.Char] | len v == 1 + len v_B2\n                                                 && tail v == v_B2}"
105:39-105:42::_ :: "{v : GHC.Types.Char | v == ((lit \"32\" Char) : Char)}"
105:50-105:65::lq_anf$##7205759403792823758 :: "(GHC.Types.IO [GHC.Types.Char])"
105:54-105:65::lq_anf$##7205759403792823757 :: "[GHC.Types.Char]"
108:5-108:8::get :: "[GHC.Types.Char] -> (GHC.Types.IO [GHC.Types.Char])"
108:9-108:10::s :: "[GHC.Types.Char]"
108:13-108:21::lq_anf$##7205759403792823748 :: "(GHC.Types.IO ())"
108:20-108:21::s :: "{v : [GHC.Types.Char] | v == s##a7ui\n                        && len v >= 0}"
108:25-108:32::System.IO.getLine :: "{v : (GHC.Types.IO [GHC.Types.Char]) | v == getLine}"
111:1-111:8::Lib.testMap :: "[GHC.Types.Bool]"
111:15-111:20::lq_anf$##7205759403792823667 :: "(GHC.Num.Integer.Integer -> GHC.Types.Bool) -> GHC.Types.Bool"
111:18-111:19::lq_anf$##7205759403792823666 :: "{v : GHC.Prim.Int# | v == 4}"
111:21-111:32::lq_anf$##7205759403792823672 :: "[GHC.Num.Integer.Integer -> GHC.Types.Bool]"
111:22-111:26::lq_anf$##7205759403792823668 :: "GHC.Num.Integer.Integer -> GHC.Types.Bool"
111:28-111:31::lq_anf$##7205759403792823669 :: "GHC.Num.Integer.Integer -> GHC.Types.Bool"
150:1-150:13::Lib.testFunctor1 :: "(GHC.Maybe.Maybe GHC.Types.Int)"
150:16-150:22::lq_anf$##7205759403792823709 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (-x1)}"
150:27-150:33::lq_anf$##7205759403792823712 :: "(GHC.Maybe.Maybe GHC.Types.Int)"
150:32-150:33::lq_anf$##7205759403792823711 :: "GHC.Types.Int"
153:1-153:8::Lib.testAp1 :: "(GHC.Types.IO GHC.Types.Bool)"
154:3-154:7::lq_anf$##7205759403792823740 :: "x1:Data.Text.Internal.Text -> x2:Data.Text.Internal.Text -> {v : GHC.Types.Bool | v <=> x1 == x2}"
154:12-154:44::lq_anf$##7205759403792823743 :: "(GHC.Types.IO Data.Text.Internal.Text)"
154:21-154:44::lq_anf$##7205759403792823742 :: "[GHC.Types.Char]"
155:9-155:41::lq_anf$##7205759403792823747 :: "(GHC.Types.IO Data.Text.Internal.Text)"
155:18-155:41::lq_anf$##7205759403792823746 :: "[GHC.Types.Char]"
158:1-158:8::Lib.testAp2 :: "(GHC.Types.IO GHC.Types.Bool)"
159:3-159:7::lq_anf$##7205759403792823732 :: "x1:Data.Text.Internal.Text -> x2:Data.Text.Internal.Text -> {v : GHC.Types.Bool | v <=> x1 == x2}"
159:12-159:44::lq_anf$##7205759403792823735 :: "(GHC.Types.IO Data.Text.Internal.Text)"
159:21-159:44::lq_anf$##7205759403792823734 :: "[GHC.Types.Char]"
160:9-160:47::lq_anf$##7205759403792823739 :: "(GHC.Types.IO Data.Text.Internal.Text)"
160:18-160:47::lq_anf$##7205759403792823738 :: "[GHC.Types.Char]"