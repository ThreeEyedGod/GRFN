1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
25:1-25:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
25:21-25:22::l :: "{v : GHC.Types.Int | v == l##a7ce\n                     && v >= 0\n                     && 0 < v}"
25:26-25:27::u :: "{v : GHC.Types.Int | v == u##a7cf\n                     && v >= 0\n                     && 0 < v}"
25:31-25:32::l :: "{v : GHC.Types.Int | v == l##a7ce\n                     && v >= 0\n                     && 0 < v}"
25:35-25:36::lq_anf$##7205759403792821898 :: "GHC.Types.Int"
25:39-25:44::lq_anf$##7205759403792821904 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7ce > x1 then l##a7ce else x1)}"
25:43-25:44::l :: "{v : GHC.Types.Int | v == l##a7ce\n                     && v >= 0\n                     && 0 < v}"
25:47-25:52::lq_anf$##7205759403792821905 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7cf < x1 then u##a7cf else x1)}"
25:51-25:52::u :: "{v : GHC.Types.Int | v == u##a7cf\n                     && v >= 0\n                     && 0 < v}"
25:57-25:86::lq_anf$##7205759403792821908 :: "(GHC.Types.IO GHC.Types.Int)"
25:67-25:73::lq_anf$##7205759403792821907 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7ce\n                                      && snd v == u##a7cf\n                                      && x_Tuple21 v == l##a7ce\n                                      && x_Tuple22 v == u##a7cf}"
25:68-25:69::l :: "{v : GHC.Types.Int | v == l##a7ce\n                     && v >= 0\n                     && 0 < v}"
25:71-25:72::u :: "{v : GHC.Types.Int | v == u##a7cf\n                     && v >= 0\n                     && 0 < v}"
25:74-25:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
26:16-26:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
26:20-26:32::lq_anf$##7205759403792821903 :: "[GHC.Types.Char]"
33:1-33:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
33:14-33:21::lq_anf$##7205759403792821922 :: "{v : [GHC.Types.Int] | len v == 0}"
33:19-33:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
37:14-37:15::ds_d7lp :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:18-37:19::lq_anf$##7205759403792821912 :: "GHC.Types.Int"
37:22-37:39::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
37:33-37:39::lq_anf$##7205759403792821919 :: "(GHC.Types.Int, GHC.Types.Int)"
37:34-37:35::lq_anf$##7205759403792821918 :: "GHC.Types.Int"
37:37-37:38::ds_d7lp :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:44-37:79::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
37:45-37:49::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:53-37:61::lq_anf$##7205759403792821920 :: "v_B2:{VV##1287 : [GHC.Types.Int] | len $VV##1287##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7ch\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
37:54-37:58::seed :: "{v : GHC.Types.Int | v == seed##a7ch\n                     && v >= 0\n                     && 0 < v}"
37:66-37:79::lq_anf$##7205759403792821921 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7ch}])"
37:75-37:79::seed :: "{v : GHC.Types.Int | v == seed##a7ch\n                     && v >= 0\n                     && 0 < v}"
38:14-38:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
38:18-38:30::lq_anf$##7205759403792821916 :: "[GHC.Types.Char]"
45:1-45:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:34-45:35::x :: "GHC.Types.Int"
45:38-45:39::x :: "{v : GHC.Types.Int | v == x##a7ci}"
45:43-45:44::lq_anf$##7205759403792821924 :: "GHC.Types.Int"
45:47-45:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:54-45:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
45:61-45:75::lq_anf$##7205759403792821947 :: "Data.Text.Internal.Text"
45:66-45:75::lq_anf$##7205759403792821946 :: "[GHC.Types.Char]"
46:38-46:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
46:45-46:59::lq_anf$##7205759403792821944 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
46:51-46:59::lq_anf$##7205759403792821943 :: "(GHC.Types.Int, [GHC.Types.Int])"
46:52-46:53::lq_anf$##7205759403792821938 :: "GHC.Types.Int"
46:55-46:58::lq_anf$##7205759403792821942 :: "[GHC.Types.Int]"
46:56-46:57::lq_anf$##7205759403792821940 :: "GHC.Types.Int"
48:3-48:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7ci}]"
48:14-48:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
48:23-48:24::x :: "{v : GHC.Types.Int | v == x##a7ci}"
49:7-49:10::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
49:12-49:14::ps :: "GHC.Types.Int"
49:16-49:18::sq :: "{VV##1523 : [GHC.Types.Int] | false}"
49:22-49:61::lq_anf$##7205759403792821931 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
49:23-49:33::lq_anf$##7205759403792821929 :: "GHC.Types.Int"
49:31-49:33::sq :: "{VV##1523 : [GHC.Types.Int] | false}"
49:35-49:60::lq_anf$##7205759403792821930 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7ck}"
49:42-49:52::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
49:53-49:60::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7ci}] | v == solnSet##a7ck\n                                               && len v >= 0}"
50:3-50:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
50:7-50:16::lq_anf$##7205759403792821933 :: "{v : GHC.Types.Bool | v <=> ps##a7eN <= x##a7ci}"
50:8-50:10::ps :: "{v : GHC.Types.Int | v == ps##a7eN}"
50:14-50:15::x :: "{v : GHC.Types.Int | v == x##a7ci}"
50:17-50:35::lq_anf$##7205759403792821935 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
50:18-50:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
50:25-50:34::lq_anf$##7205759403792821934 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
50:31-50:34::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7eK}"
50:36-50:72::lq_anf$##7205759403792821936 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
50:70-50:71::x :: "{v : GHC.Types.Int | v == x##a7ci}"
56:1-56:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
56:12-56:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
56:16-56:17::n :: "{v : GHC.Types.Int | v == n##a7co\n                     && v >= 0\n                     && 0 < v}"
56:20-56:21::lq_anf$##7205759403792821886 :: "GHC.Types.Int"
56:24-56:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
56:28-56:40::lq_anf$##7205759403792821894 :: "[GHC.Types.Char]"
57:16-57:24::lq_anf$##7205759403792821891 :: "GHC.Types.Bool"
57:17-57:18::n :: "{v : GHC.Types.Int | v == n##a7co\n                     && v >= 0\n                     && 0 < v}"
57:22-57:23::lq_anf$##7205759403792821890 :: "GHC.Types.Int"
57:28-57:37::lq_anf$##7205759403792821892 :: "GHC.Types.Bool"
57:36-57:37::n :: "{v : GHC.Types.Int | v == n##a7co\n                     && v >= 0\n                     && 0 < v}"