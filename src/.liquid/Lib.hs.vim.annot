1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
18:1-18:31::Lib.genARandomPreFactoredNumberLEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
18:32-18:33::x :: "GHC.Types.Int"
18:36-18:37::x :: "{v : GHC.Types.Int | v == x}"
18:41-18:42::lq_anf$##7205759403792817534 :: "GHC.Types.Int"
18:46-18:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
18:53-18:67::lq_anf$##7205759403792817572 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
18:58-18:67::lq_anf$##7205759403792817571 :: "[GHC.Types.Char]"
19:46-19:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
19:53-19:67::lq_anf$##7205759403792817569 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
19:59-19:67::lq_anf$##7205759403792817568 :: "(GHC.Types.Int, [GHC.Types.Int])"
19:60-19:61::lq_anf$##7205759403792817563 :: "GHC.Types.Int"
19:63-19:66::lq_anf$##7205759403792817567 :: "[GHC.Types.Int]"
19:64-19:65::lq_anf$##7205759403792817565 :: "GHC.Types.Int"
20:36-20:37::x :: "{v : GHC.Types.Int | v == x}"
20:41-20:42::lq_anf$##7205759403792817540 :: "GHC.Types.Int"
21:49-21:53::rndM :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                          && v > 0\n                                                          && v >= 0\n                                                          && 0 < v\n                                                          && 2 <= v})"
21:57-21:95::_ :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                                        && v > 0\n                                                                        && v >= 0\n                                                                        && 0 < v\n                                                                        && 2 <= v}))"
21:62-21:75::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | 2 <= v})"
21:76-21:95::lq_anf$##7205759403792817549 :: "(GHC.Types.IO GHC.Types.Int)"
21:88-21:94::lq_anf$##7205759403792817548 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x\n                                      && x_Tuple22 v == x}"
21:89-21:90::lq_anf$##7205759403792817547 :: "GHC.Types.Int"
21:92-21:93::x :: "{v : GHC.Types.Int | v == x}"
22:54-22:58::_ :: "{v : (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                               && v > 0\n                                                               && v >= 0\n                                                               && 0 < v\n                                                               && 2 <= v}) | v == rndM}"
23:69-23:73::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
23:76-23:90::lq_anf$##7205759403792817553 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
23:81-23:90::lq_anf$##7205759403792817552 :: "[GHC.Types.Char]"
24:69-24:136::ShortCircuit.$fShortcircuitBool :: "{v : (ShortCircuit.Shortcircuit GHC.Types.Bool) | v == $fShortcircuitBool}"
24:73-24:82::lq_anf$##7205759403792817558 :: "{v : GHC.Types.Bool | v <=> ps <= x}"
24:74-24:76::ps :: "{v : GHC.Types.Int | v == ps}"
24:80-24:81::x :: "{v : GHC.Types.Int | v == x}"
24:83-24:101::lq_anf$##7205759403792817560 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:84-24:88::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:91-24:100::lq_anf$##7205759403792817559 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
24:97-24:100::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp}"
24:102-24:136::lq_anf$##7205759403792817561 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:134-24:135::x :: "{v : GHC.Types.Int | v == x}"
25:79-25:82::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
25:84-25:86::ps :: "GHC.Types.Int"
25:88-25:90::sq :: "{VV : [GHC.Types.Int] | false}"
25:94-25:123::lq_anf$##7205759403792817556 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
25:95-25:105::lq_anf$##7205759403792817554 :: "GHC.Types.Int"
25:103-25:105::sq :: "{VV : [GHC.Types.Int] | false}"
25:107-25:122::lq_anf$##7205759403792817555 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
25:117-25:122::upper :: "{v : GHC.Types.Int | v == upper\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
26:46-26:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
26:53-26:67::lq_anf$##7205759403792817545 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
26:58-26:67::lq_anf$##7205759403792817544 :: "[GHC.Types.Char]"
31:1-31:10::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
31:32-31:35::lq_anf$##7205759403792817530 :: "{v : [GHC.Types.Int] | len v == 0}"
31:33-31:34::lq_anf$##7205759403792817529 :: "GHC.Types.Int"
32:15-32:16::ds_d64N :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
32:20-32:21::lq_anf$##7205759403792817511 :: "GHC.Types.Int"
32:37-32:58::lq_anf$##7205759403792817516 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
32:57-32:58::ds_d64N :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
33:49-33:60::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
33:59-33:60::lq_anf$##7205759403792817519 :: "GHC.Types.Int"
37:58-37:84::lq_anf$##7205759403792817523 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
37:78-37:84::lq_anf$##7205759403792817522 :: "GHC.Types.Int"
37:79-37:81::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
37:82-37:83::lq_anf$##7205759403792817521 :: "GHC.Types.Int"
38:73-38:84::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
38:83-38:84::lq_anf$##7205759403792817526 :: "GHC.Types.Int"
39:74-39:76::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
39:79-39:92::lq_anf$##7205759403792817527 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
39:89-39:92::okN :: "{v : GHC.Types.Int | v == okN\n                     && v >= 0\n                     && 0 < v}"
40:55-40:57::si :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
40:60-40:78::_ :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
40:73-40:78::nGte1 :: "{v : GHC.Types.Int | v == nGte1\n                     && v >= 0\n                     && 0 < v}"
41:32-41:48::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
41:36-41:48::lq_anf$##7205759403792817515 :: "[GHC.Types.Char]"
47:1-47:13::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
47:30-47:31::lq_anf$##7205759403792817507 :: "{v : GHC.Prim.Int# | v == 1}"
48:18-48:27::lq_anf$##7205759403792817496 :: "GHC.Types.Bool"
48:26-48:27::ds_d63R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
48:30-48:31::ds_d63R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
49:18-49:19::ds_d63R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
49:22-49:23::lq_anf$##7205759403792817499 :: "GHC.Types.Int"
49:30-49:48::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
49:43-49:48::lq_anf$##7205759403792817506 :: "GHC.Types.Int"
49:44-49:45::ds_d63R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
49:46-49:47::lq_anf$##7205759403792817505 :: "GHC.Types.Int"
50:30-50:46::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
50:34-50:46::lq_anf$##7205759403792817503 :: "[GHC.Types.Char]"
56:1-56:11::Lib.getRndMInt :: "({VV : GHC.Types.Int | VV /= 0\n                       && VV > 0\n                       && VV >= 0\n                       && 0 < VV\n                       && 2 <= VV}, {VV : GHC.Types.Int | VV /= 0\n                                                          && VV > 0\n                                                          && VV >= 0\n                                                          && 0 < VV\n                                                          && 2 <= VV})<\\x1 VV -> {VV : GHC.Types.Int | VV /= 0\n                                                                                                       && VV > 0\n                                                                                                       && VV >= 0\n                                                                                                       && VV >= x1\n                                                                                                       && 0 < VV\n                                                                                                       && 2 <= VV}> -> (GHC.Types.IO GHC.Types.Int)"
56:21-56:60::$dStatefulGen_a3zv :: "{v : (System.Random.Internal.StatefulGen (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) GHC.Types.IO) | v == $dStatefulGen_a3zv}"
56:31-56:37::lq_anf$##7205759403792817532 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l\n                                      && snd v == u\n                                      && x_Tuple21 v == l\n                                      && x_Tuple22 v == u}"
56:32-56:33::l :: "{v : GHC.Types.Int | v == l\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
56:35-56:36::u :: "{v : GHC.Types.Int | v == u\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && v >= l\n                     && 0 < v\n                     && 2 <= v}"
56:38-56:50::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
61:1-61:10::Lib.fromRight :: "forall a b .\n{VV : (Data.Either.Either {VV : a | false} b) | false} -> b"
61:23-61:24::v :: "{VV : a | VV == v}"
62:15-62:27::$dIP_a3zi :: "{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a3zi}"
62:21-62:27::lq_anf$##7205759403792817488 :: "[GHC.Types.Char]"