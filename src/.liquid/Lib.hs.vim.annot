1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
18:1-18:31::Lib.genARandomPreFactoredNumberLEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
18:32-18:33::x :: "GHC.Types.Int"
18:36-18:37::x :: "{v : GHC.Types.Int | v == x}"
18:41-18:42::lq_anf$##7205759403792817434 :: "GHC.Types.Int"
18:46-18:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
18:53-18:67::lq_anf$##7205759403792817472 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
18:58-18:67::lq_anf$##7205759403792817471 :: "[GHC.Types.Char]"
19:46-19:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
19:53-19:67::lq_anf$##7205759403792817469 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
19:59-19:67::lq_anf$##7205759403792817468 :: "(GHC.Types.Int, [GHC.Types.Int])"
19:60-19:61::lq_anf$##7205759403792817463 :: "GHC.Types.Int"
19:63-19:66::lq_anf$##7205759403792817467 :: "[GHC.Types.Int]"
19:64-19:65::lq_anf$##7205759403792817465 :: "GHC.Types.Int"
20:36-20:37::x :: "{v : GHC.Types.Int | v == x}"
20:41-20:42::lq_anf$##7205759403792817440 :: "GHC.Types.Int"
21:49-21:53::rndM :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                          && v > 0\n                                                          && v >= 0\n                                                          && 0 < v\n                                                          && 2 <= v})"
21:57-21:95::_ :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                                        && v > 0\n                                                                        && v >= 0\n                                                                        && 0 < v\n                                                                        && 2 <= v}))"
21:62-21:75::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | 2 <= v})"
21:76-21:95::lq_anf$##7205759403792817449 :: "(GHC.Types.IO GHC.Types.Int)"
21:88-21:94::lq_anf$##7205759403792817448 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x\n                                      && x_Tuple22 v == x}"
21:89-21:90::lq_anf$##7205759403792817447 :: "GHC.Types.Int"
21:92-21:93::x :: "{v : GHC.Types.Int | v == x}"
22:54-22:58::_ :: "{v : (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                               && v > 0\n                                                               && v >= 0\n                                                               && 0 < v\n                                                               && 2 <= v}) | v == rndM}"
23:69-23:73::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
23:76-23:90::lq_anf$##7205759403792817453 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
23:81-23:90::lq_anf$##7205759403792817452 :: "[GHC.Types.Char]"
24:69-24:136::ShortCircuit.$fShortcircuitBool :: "{v : (ShortCircuit.Shortcircuit GHC.Types.Bool) | v == $fShortcircuitBool}"
24:73-24:82::lq_anf$##7205759403792817458 :: "{v : GHC.Types.Bool | v <=> ps <= x}"
24:74-24:76::ps :: "{v : GHC.Types.Int | v == ps}"
24:80-24:81::x :: "{v : GHC.Types.Int | v == x}"
24:83-24:101::lq_anf$##7205759403792817460 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:84-24:88::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:91-24:100::lq_anf$##7205759403792817459 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
24:97-24:100::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp}"
24:102-24:136::lq_anf$##7205759403792817461 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
24:134-24:135::x :: "{v : GHC.Types.Int | v == x}"
25:79-25:82::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
25:84-25:86::ps :: "GHC.Types.Int"
25:88-25:90::sq :: "{VV : [GHC.Types.Int] | false}"
25:94-25:123::lq_anf$##7205759403792817456 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
25:95-25:105::lq_anf$##7205759403792817454 :: "GHC.Types.Int"
25:103-25:105::sq :: "{VV : [GHC.Types.Int] | false}"
25:107-25:122::lq_anf$##7205759403792817455 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
25:117-25:122::upper :: "{v : GHC.Types.Int | v == upper\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
26:46-26:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
26:53-26:67::lq_anf$##7205759403792817445 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
26:58-26:67::lq_anf$##7205759403792817444 :: "[GHC.Types.Char]"
31:1-31:10::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
31:32-31:35::lq_anf$##7205759403792817430 :: "{v : [GHC.Types.Int] | len v == 0}"
31:33-31:34::lq_anf$##7205759403792817429 :: "GHC.Types.Int"
32:15-32:16::ds_d63H :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
32:20-32:21::lq_anf$##7205759403792817411 :: "GHC.Types.Int"
32:37-32:58::lq_anf$##7205759403792817416 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
32:57-32:58::ds_d63H :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
33:49-33:60::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
33:59-33:60::lq_anf$##7205759403792817419 :: "GHC.Types.Int"
35:58-35:84::lq_anf$##7205759403792817423 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
35:78-35:84::lq_anf$##7205759403792817422 :: "GHC.Types.Int"
35:79-35:81::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
35:82-35:83::lq_anf$##7205759403792817421 :: "GHC.Types.Int"
36:73-36:84::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
36:83-36:84::lq_anf$##7205759403792817426 :: "GHC.Types.Int"
37:74-37:76::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
37:79-37:92::lq_anf$##7205759403792817427 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
37:89-37:92::okN :: "{v : GHC.Types.Int | v == okN\n                     && v >= 0\n                     && 0 < v}"
38:55-38:57::si :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
38:60-38:78::_ :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
38:73-38:78::nGte1 :: "{v : GHC.Types.Int | v == nGte1\n                     && v >= 0\n                     && 0 < v}"
39:32-39:48::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
39:36-39:48::lq_anf$##7205759403792817415 :: "[GHC.Types.Char]"
45:1-45:13::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
45:30-45:31::lq_anf$##7205759403792817407 :: "{v : GHC.Prim.Int# | v == 1}"
46:18-46:27::lq_anf$##7205759403792817396 :: "GHC.Types.Bool"
46:26-46:27::ds_d622 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
46:30-46:31::ds_d622 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
47:18-47:19::ds_d622 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
47:22-47:23::lq_anf$##7205759403792817399 :: "GHC.Types.Int"
47:30-47:48::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
47:43-47:48::lq_anf$##7205759403792817406 :: "GHC.Types.Int"
47:44-47:45::ds_d622 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
47:46-47:47::lq_anf$##7205759403792817405 :: "GHC.Types.Int"
48:30-48:46::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
48:34-48:46::lq_anf$##7205759403792817403 :: "[GHC.Types.Char]"
54:1-54:11::Lib.getRndMInt :: "({VV : GHC.Types.Int | VV /= 0\n                       && VV > 0\n                       && VV >= 0\n                       && 0 < VV\n                       && 2 <= VV}, {VV : GHC.Types.Int | VV /= 0\n                                                          && VV > 0\n                                                          && VV >= 0\n                                                          && 0 < VV\n                                                          && 2 <= VV})<\\x1 VV -> {VV : GHC.Types.Int | VV /= 0\n                                                                                                       && VV > 0\n                                                                                                       && VV >= 0\n                                                                                                       && VV >= x1\n                                                                                                       && 0 < VV\n                                                                                                       && 2 <= VV}> -> (GHC.Types.IO GHC.Types.Int)"
54:21-54:60::$dStatefulGen_a3xn :: "{v : (System.Random.Internal.StatefulGen (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) GHC.Types.IO) | v == $dStatefulGen_a3xn}"
54:31-54:37::lq_anf$##7205759403792817432 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l\n                                      && snd v == u\n                                      && x_Tuple21 v == l\n                                      && x_Tuple22 v == u}"
54:32-54:33::l :: "{v : GHC.Types.Int | v == l\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
54:35-54:36::u :: "{v : GHC.Types.Int | v == u\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && v >= l\n                     && 0 < v\n                     && 2 <= v}"
54:38-54:50::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"