1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
29:1-29:15::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
29:16-29:17::x :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
29:20-29:21::x :: "{v : GHC.Types.Int | v == x##a7fK\n                     && v >= 0\n                     && 0 < v}"
29:25-29:26::lq_anf$##7205759403792821946 :: "GHC.Types.Int"
29:29-29:33::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
29:36-29:40::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
29:43-29:57::lq_anf$##7205759403792821999 :: "Data.Text.Internal.Text"
29:48-29:57::lq_anf$##7205759403792821998 :: "[GHC.Types.Char]"
30:20-30:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
30:27-30:35::lq_anf$##7205759403792821996 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
30:33-30:35::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
31:20-31:21::x :: "{v : GHC.Types.Int | v == x##a7fK\n                     && v >= 0\n                     && 0 < v}"
31:25-31:26::lq_anf$##7205759403792821952 :: "GHC.Types.Int"
32:3-32:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
32:11-32:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
32:22-32:28::lq_anf$##7205759403792821961 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x##a7fK\n                                      && x_Tuple22 v == x##a7fK}"
32:23-32:24::lq_anf$##7205759403792821960 :: "GHC.Types.Int"
32:26-32:27::x :: "{v : GHC.Types.Int | v == x##a7fK\n                     && v >= 0\n                     && 0 < v}"
33:3-33:4::x :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= seed##a7fM}])"
33:8-33:27::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
33:23-33:27::seed :: "{v : GHC.Types.Int | v == seed##a7fM\n                     && v >= 0\n                     && 0 < v}"
34:8-34:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= seed##a7fM}]) | v == x##a7fN}"
35:15-35:19::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
35:22-35:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
35:29-35:43::lq_anf$##7205759403792821965 :: "Data.Text.Internal.Text"
35:34-35:43::lq_anf$##7205759403792821964 :: "[GHC.Types.Char]"
36:17-36:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
36:24-36:28::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
36:31-36:45::lq_anf$##7205759403792821970 :: "Data.Text.Internal.Text"
36:36-36:45::lq_anf$##7205759403792821969 :: "[GHC.Types.Char]"
38:12-38:78::lq_anf$##7205759403792821987 :: "GHC.Types.Bool"
38:13-38:17::seed :: "{v : GHC.Types.Int | v == seed##a7fM\n                     && v >= 0\n                     && 0 < v}"
38:21-38:22::x :: "{v : GHC.Types.Int | v == x##a7fK\n                     && v >= 0\n                     && 0 < v}"
38:26-38:30::seed :: "{v : GHC.Types.Int | v == seed##a7fM\n                     && v >= 0\n                     && 0 < v}"
38:33-38:34::lq_anf$##7205759403792821974 :: "GHC.Types.Int"
38:38-38:40::x1 :: "{v : GHC.Types.Int | v == x1##a7fP\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7fM}"
38:44-38:45::x :: "{v : GHC.Types.Int | v == x##a7fK\n                     && v >= 0\n                     && 0 < v}"
38:49-38:51::x1 :: "{v : GHC.Types.Int | v == x1##a7fP\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7fM}"
38:54-38:55::lq_anf$##7205759403792821978 :: "GHC.Types.Int"
38:59-38:77::lq_anf$##7205759403792821983 :: "GHC.Types.Bool"
38:60-38:71::lq_anf$##7205759403792821980 :: "{v : GHC.Types.Int | v == seed##a7fM - x1##a7fP}"
38:61-38:65::seed :: "{v : GHC.Types.Int | v == seed##a7fM\n                     && v >= 0\n                     && 0 < v}"
38:68-38:70::x1 :: "{v : GHC.Types.Int | v == x1##a7fP\n                     && v >= 0\n                     && 0 < v\n                     && 1 <= v\n                     && v <= seed##a7fM}"
38:75-38:76::lq_anf$##7205759403792821982 :: "GHC.Types.Int"
39:17-39:21::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
39:24-39:42::lq_anf$##7205759403792821994 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
39:30-39:42::lq_anf$##7205759403792821993 :: "{v : [GHC.Types.Int] | head v == seed##a7fM}"
39:31-39:35::seed :: "{v : GHC.Types.Int | v == seed##a7fM\n                     && v >= 0\n                     && 0 < v}"
39:38-39:41::ds_d7lO :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= seed##a7fM}] | len v >= 0}"
40:18-40:22::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
40:25-40:29::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
40:32-40:46::lq_anf$##7205759403792821991 :: "Data.Text.Internal.Text"
40:37-40:46::lq_anf$##7205759403792821990 :: "[GHC.Types.Char]"
41:20-41:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
41:27-41:31::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
41:34-41:48::lq_anf$##7205759403792821957 :: "Data.Text.Internal.Text"
41:39-41:48::lq_anf$##7205759403792821956 :: "[GHC.Types.Char]"
48:1-48:32::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:33-48:34::x :: "GHC.Types.Int"
48:37-48:38::x :: "{v : GHC.Types.Int | v == x##a7fQ}"
48:42-48:43::lq_anf$##7205759403792822002 :: "GHC.Types.Int"
48:46-48:50::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:53-48:57::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
48:60-48:74::lq_anf$##7205759403792822049 :: "Data.Text.Internal.Text"
48:65-48:74::lq_anf$##7205759403792822048 :: "[GHC.Types.Char]"
49:37-49:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:44-49:58::lq_anf$##7205759403792822046 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
49:50-49:58::lq_anf$##7205759403792822045 :: "(GHC.Types.Int, [GHC.Types.Int])"
49:51-49:52::lq_anf$##7205759403792822040 :: "GHC.Types.Int"
49:54-49:57::lq_anf$##7205759403792822044 :: "[GHC.Types.Int]"
49:55-49:56::lq_anf$##7205759403792822042 :: "GHC.Types.Int"
50:37-50:38::x :: "{v : GHC.Types.Int | v == x##a7fQ}"
50:42-50:43::lq_anf$##7205759403792822008 :: "GHC.Types.Int"
51:3-51:4::m :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v\n                                                                  && 1 <= v\n                                                                  && v <= x##a7fQ}])"
51:8-51:24::Lib.createBasicSeq :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                 && 0 < VV##0\n                                                                                                                                 && 1 <= VV##0\n                                                                                                                                 && VV##0 <= x1}]))"
51:23-51:24::x :: "{v : GHC.Types.Int | v == x##a7fQ}"
52:8-52:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v\n                                                                       && 1 <= v\n                                                                       && v <= x##a7fQ}]) | v == m##a7fS}"
53:15-53:19::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
53:22-53:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
53:29-53:43::lq_anf$##7205759403792822018 :: "Data.Text.Internal.Text"
53:34-53:43::lq_anf$##7205759403792822017 :: "[GHC.Types.Char]"
54:25-54:93::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
54:29-54:38::lq_anf$##7205759403792822035 :: "{v : GHC.Types.Bool | v <=> ps##a7kd <= x##a7fQ}"
54:30-54:32::ps :: "{v : GHC.Types.Int | v == ps##a7kd}"
54:36-54:37::x :: "{v : GHC.Types.Int | v == x##a7fQ}"
54:39-54:57::lq_anf$##7205759403792822037 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
54:40-54:44::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
54:47-54:56::lq_anf$##7205759403792822036 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
54:53-54:56::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7ka}"
54:58-54:93::lq_anf$##7205759403792822038 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
54:91-54:92::x :: "{v : GHC.Types.Int | v == x##a7fQ}"
56:9-56:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
56:14-56:16::ps :: "GHC.Types.Int"
56:18-56:20::sq :: "[GHC.Types.Int]"
56:24-56:85::lq_anf$##7205759403792822033 :: "(GHC.Types.Int, [GHC.Types.Int])"
56:25-56:35::lq_anf$##7205759403792822020 :: "GHC.Types.Int"
56:33-56:35::sq :: "[GHC.Types.Int]"
56:37-56:38::lq_anf$##7205759403792822022 :: "GHC.Types.Int"
56:41-56:84::lq_anf$##7205759403792822031 :: "[GHC.Types.Int]"
56:42-56:43::ds_d7mg :: "GHC.Types.Int"
56:51-56:76::lq_anf$##7205759403792822030 :: "{v : [GHC.Types.Int] | len v <= len seqNumbers##a7fT}"
56:58-56:65::lq_anf$##7205759403792822029 :: "GHC.Types.Int -> GHC.Types.Bool"
56:66-56:76::seqNumbers :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7fQ}] | v == seqNumbers##a7fT\n                                               && len v >= 0}"
56:78-56:79::ds_d7mg :: "GHC.Types.Int"
56:82-56:83::lq_anf$##7205759403792822025 :: "GHC.Types.Int"
57:37-57:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
57:44-57:48::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
57:51-57:65::lq_anf$##7205759403792822013 :: "Data.Text.Internal.Text"
57:56-57:65::lq_anf$##7205759403792822012 :: "[GHC.Types.Char]"
65:1-65:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
65:21-65:22::l :: "{v : GHC.Types.Int | v == l##a7fY\n                     && v >= 0\n                     && 0 < v}"
65:26-65:27::u :: "{v : GHC.Types.Int | v == u##a7fZ\n                     && v >= 0\n                     && 0 < v}"
65:31-65:32::l :: "{v : GHC.Types.Int | v == l##a7fY\n                     && v >= 0\n                     && 0 < v}"
65:35-65:36::lq_anf$##7205759403792821936 :: "GHC.Types.Int"
66:3-66:9::result :: "GHC.Types.Int"
66:13-66:52::_ :: "(GHC.Types.IO GHC.Types.Int)"
66:23-66:29::lq_anf$##7205759403792821942 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7fY\n                                      && snd v == u##a7fZ\n                                      && x_Tuple21 v == l##a7fY\n                                      && x_Tuple22 v == u##a7fZ}"
66:24-66:25::l :: "{v : GHC.Types.Int | v == l##a7fY\n                     && v >= 0\n                     && 0 < v}"
66:27-66:28::u :: "{v : GHC.Types.Int | v == u##a7fZ\n                     && v >= 0\n                     && 0 < v}"
66:30-66:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
67:3-67:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
67:10-67:16::result :: "{v : GHC.Types.Int | v == result##a7g0}"
67:23-67:24::u :: "{v : GHC.Types.Int | v == u##a7fZ\n                     && v >= 0\n                     && 0 < v}"
67:31-67:32::l :: "{v : GHC.Types.Int | v == l##a7fY\n                     && v >= 0\n                     && 0 < v}"
68:16-68:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
68:20-68:32::lq_anf$##7205759403792821941 :: "[GHC.Types.Char]"