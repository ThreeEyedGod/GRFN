1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
25:1-25:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
25:21-25:22::l :: "{v : GHC.Types.Int | v == l##a7hX\n                     && v >= 0\n                     && 0 < v}"
25:26-25:27::u :: "{v : GHC.Types.Int | v == u##a7hY\n                     && v >= 0\n                     && 0 < v}"
25:31-25:32::l :: "{v : GHC.Types.Int | v == l##a7hX\n                     && v >= 0\n                     && 0 < v}"
25:35-25:36::lq_anf$##7205759403792822253 :: "GHC.Types.Int"
25:39-25:44::lq_anf$##7205759403792822259 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7hX > x1 then l##a7hX else x1)}"
25:43-25:44::l :: "{v : GHC.Types.Int | v == l##a7hX\n                     && v >= 0\n                     && 0 < v}"
25:47-25:52::lq_anf$##7205759403792822260 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7hY < x1 then u##a7hY else x1)}"
25:51-25:52::u :: "{v : GHC.Types.Int | v == u##a7hY\n                     && v >= 0\n                     && 0 < v}"
25:57-25:86::lq_anf$##7205759403792822263 :: "(GHC.Types.IO GHC.Types.Int)"
25:67-25:73::lq_anf$##7205759403792822262 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7hX\n                                      && snd v == u##a7hY\n                                      && x_Tuple21 v == l##a7hX\n                                      && x_Tuple22 v == u##a7hY}"
25:68-25:69::l :: "{v : GHC.Types.Int | v == l##a7hX\n                     && v >= 0\n                     && 0 < v}"
25:71-25:72::u :: "{v : GHC.Types.Int | v == u##a7hY\n                     && v >= 0\n                     && 0 < v}"
25:74-25:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
26:16-26:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
26:20-26:32::lq_anf$##7205759403792822258 :: "[GHC.Types.Char]"
33:1-33:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
33:14-33:21::lq_anf$##7205759403792822277 :: "{v : [GHC.Types.Int] | len v == 0}"
33:19-33:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
34:14-34:15::ds_d7r8 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
34:18-34:19::lq_anf$##7205759403792822267 :: "GHC.Types.Int"
35:3-35:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
35:11-35:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
35:22-35:28::lq_anf$##7205759403792822274 :: "(GHC.Types.Int, GHC.Types.Int)"
35:23-35:24::lq_anf$##7205759403792822273 :: "GHC.Types.Int"
35:26-35:27::ds_d7r8 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:3-36:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
36:8-36:16::lq_anf$##7205759403792822275 :: "v_B2:{VV##1316 : [GHC.Types.Int] | len $VV##1316##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7i0\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
36:9-36:13::seed :: "{v : GHC.Types.Int | v == seed##a7i0\n                     && v >= 0\n                     && 0 < v}"
36:17-36:32::lq_anf$##7205759403792822276 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7i0}])"
36:27-36:31::seed :: "{v : GHC.Types.Int | v == seed##a7i0\n                     && v >= 0\n                     && 0 < v}"
37:14-37:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
37:18-37:30::lq_anf$##7205759403792822271 :: "[GHC.Types.Char]"
44:1-44:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
44:34-44:35::x :: "GHC.Types.Int"
44:38-44:39::x :: "{v : GHC.Types.Int | v == x##a7i1}"
44:43-44:44::lq_anf$##7205759403792822279 :: "GHC.Types.Int"
44:47-44:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
44:54-44:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
44:61-44:75::lq_anf$##7205759403792822302 :: "Data.Text.Internal.Text"
44:66-44:75::lq_anf$##7205759403792822301 :: "[GHC.Types.Char]"
45:38-45:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
45:45-45:59::lq_anf$##7205759403792822299 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
45:51-45:59::lq_anf$##7205759403792822298 :: "(GHC.Types.Int, [GHC.Types.Int])"
45:52-45:53::lq_anf$##7205759403792822293 :: "GHC.Types.Int"
45:55-45:58::lq_anf$##7205759403792822297 :: "[GHC.Types.Int]"
45:56-45:57::lq_anf$##7205759403792822295 :: "GHC.Types.Int"
47:3-47:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7i1}]"
47:14-47:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
47:23-47:24::x :: "{v : GHC.Types.Int | v == x##a7i1}"
48:7-48:10::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
48:12-48:14::ps :: "GHC.Types.Int"
48:16-48:18::sq :: "{VV##1549 : [GHC.Types.Int] | false}"
48:22-48:61::lq_anf$##7205759403792822286 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
48:23-48:33::lq_anf$##7205759403792822284 :: "GHC.Types.Int"
48:31-48:33::sq :: "{VV##1549 : [GHC.Types.Int] | false}"
48:35-48:60::lq_anf$##7205759403792822285 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7i3}"
48:42-48:52::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
48:53-48:60::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7i1}] | v == solnSet##a7i3\n                                               && len v >= 0}"
49:3-49:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
49:7-49:16::lq_anf$##7205759403792822288 :: "{v : GHC.Types.Bool | v <=> ps##a7kw <= x##a7i1}"
49:8-49:10::ps :: "{v : GHC.Types.Int | v == ps##a7kw}"
49:14-49:15::x :: "{v : GHC.Types.Int | v == x##a7i1}"
49:17-49:35::lq_anf$##7205759403792822290 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:18-49:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:25-49:34::lq_anf$##7205759403792822289 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
49:31-49:34::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7kt}"
49:36-49:72::lq_anf$##7205759403792822291 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
49:70-49:71::x :: "{v : GHC.Types.Int | v == x##a7i1}"
55:1-55:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
55:12-55:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
55:16-55:17::n :: "{v : GHC.Types.Int | v == n##a7i7\n                     && v >= 0\n                     && 0 < v}"
55:20-55:21::lq_anf$##7205759403792822241 :: "GHC.Types.Int"
55:24-55:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
55:28-55:40::lq_anf$##7205759403792822249 :: "[GHC.Types.Char]"
56:16-56:24::lq_anf$##7205759403792822246 :: "GHC.Types.Bool"
56:17-56:18::n :: "{v : GHC.Types.Int | v == n##a7i7\n                     && v >= 0\n                     && 0 < v}"
56:22-56:23::lq_anf$##7205759403792822245 :: "GHC.Types.Int"
56:28-56:37::lq_anf$##7205759403792822247 :: "GHC.Types.Bool"
56:36-56:37::n :: "{v : GHC.Types.Int | v == n##a7i7\n                     && v >= 0\n                     && 0 < v}"