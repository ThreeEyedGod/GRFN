1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
26:1-26:15::Lib.createBasicSeq :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                              && 0 < VV##0}]))"
26:16-26:17::x :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
26:20-26:21::x :: "{v : GHC.Types.Int | v == x##a7eO\n                     && v >= 0\n                     && 0 < v}"
26:25-26:26::lq_anf$##7205759403792821876 :: "GHC.Types.Int"
26:29-26:33::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
26:36-26:40::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
26:43-26:57::lq_anf$##7205759403792821906 :: "Data.Text.Internal.Text"
26:48-26:57::lq_anf$##7205759403792821905 :: "[GHC.Types.Char]"
27:20-27:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
27:27-27:36::lq_anf$##7205759403792821903 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
27:33-27:36::lq_anf$##7205759403792821902 :: "[GHC.Types.Int]"
27:34-27:35::lq_anf$##7205759403792821900 :: "GHC.Types.Int"
28:20-28:21::x :: "{v : GHC.Types.Int | v == x##a7eO\n                     && v >= 0\n                     && 0 < v}"
28:25-28:26::lq_anf$##7205759403792821882 :: "GHC.Types.Int"
29:3-29:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
29:11-29:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
29:22-29:28::lq_anf$##7205759403792821891 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x##a7eO\n                                      && x_Tuple22 v == x##a7eO}"
29:23-29:24::lq_anf$##7205759403792821890 :: "GHC.Types.Int"
29:26-29:27::x :: "{v : GHC.Types.Int | v == x##a7eO\n                     && v >= 0\n                     && 0 < v}"
30:3-30:4::x :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v}])"
30:8-30:27::Lib.createBasicSeq :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                              && 0 < VV##0}]))"
30:23-30:27::seed :: "{v : GHC.Types.Int | v == seed##a7eQ\n                     && v >= 0\n                     && 0 < v}"
31:8-31:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v}]) | v == x##a7eR}"
32:15-32:19::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
32:22-32:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
32:29-32:43::lq_anf$##7205759403792821895 :: "Data.Text.Internal.Text"
32:34-32:43::lq_anf$##7205759403792821894 :: "[GHC.Types.Char]"
33:18-33:22::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
33:25-33:43::lq_anf$##7205759403792821898 :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | not (isLeft v)}"
33:31-33:43::lq_anf$##7205759403792821897 :: "{v : [GHC.Types.Int] | head v == seed##a7eQ\n                       && len v == 1 + len nxt##a7eS\n                       && tail v == nxt##a7eS}"
33:32-33:36::seed :: "{v : GHC.Types.Int | v == seed##a7eQ\n                     && v >= 0\n                     && 0 < v}"
33:39-33:42::nxt :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | v == nxt##a7eS\n                                        && len v >= 0}"
34:20-34:24::_ :: "(Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]))"
34:27-34:31::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [GHC.Types.Int]) | isLeft v}"
34:34-34:48::lq_anf$##7205759403792821887 :: "Data.Text.Internal.Text"
34:39-34:48::lq_anf$##7205759403792821886 :: "[GHC.Types.Char]"
42:1-42:32::Lib.genARandomPreFactoredNumberLTEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
42:33-42:34::x :: "GHC.Types.Int"
42:37-42:38::x :: "{v : GHC.Types.Int | v == x##a7eT}"
42:42-42:43::lq_anf$##7205759403792821909 :: "GHC.Types.Int"
42:46-42:50::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
42:53-42:57::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
42:60-42:74::lq_anf$##7205759403792821956 :: "Data.Text.Internal.Text"
42:65-42:74::lq_anf$##7205759403792821955 :: "[GHC.Types.Char]"
43:37-43:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
43:44-43:58::lq_anf$##7205759403792821953 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
43:50-43:58::lq_anf$##7205759403792821952 :: "(GHC.Types.Int, [GHC.Types.Int])"
43:51-43:52::lq_anf$##7205759403792821947 :: "GHC.Types.Int"
43:54-43:57::lq_anf$##7205759403792821951 :: "[GHC.Types.Int]"
43:55-43:56::lq_anf$##7205759403792821949 :: "GHC.Types.Int"
44:37-44:38::x :: "{v : GHC.Types.Int | v == x##a7eT}"
44:42-44:43::lq_anf$##7205759403792821915 :: "GHC.Types.Int"
45:3-45:4::m :: "(Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                  && 0 < v}])"
45:8-45:24::Lib.createBasicSeq :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                              && 0 < VV##0}]))"
45:23-45:24::x :: "{v : GHC.Types.Int | v == x##a7eT}"
46:8-46:9::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text [{v : GHC.Types.Int | v >= 0\n                                                                       && 0 < v}]) | v == m##a7eV}"
47:15-47:19::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
47:22-47:26::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
47:29-47:43::lq_anf$##7205759403792821925 :: "Data.Text.Internal.Text"
47:34-47:43::lq_anf$##7205759403792821924 :: "[GHC.Types.Char]"
48:25-48:93::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
48:29-48:38::lq_anf$##7205759403792821942 :: "{v : GHC.Types.Bool | v <=> ps##a7iQ <= x##a7eT}"
48:30-48:32::ps :: "{v : GHC.Types.Int | v == ps##a7iQ}"
48:36-48:37::x :: "{v : GHC.Types.Int | v == x##a7eT}"
48:39-48:57::lq_anf$##7205759403792821944 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:40-48:44::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:47-48:56::lq_anf$##7205759403792821943 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
48:53-48:56::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7iN}"
48:58-48:93::lq_anf$##7205759403792821945 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
48:91-48:92::x :: "{v : GHC.Types.Int | v == x##a7eT}"
50:9-50:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
50:14-50:16::ps :: "GHC.Types.Int"
50:18-50:20::sq :: "[GHC.Types.Int]"
50:24-50:85::lq_anf$##7205759403792821940 :: "(GHC.Types.Int, [GHC.Types.Int])"
50:25-50:35::lq_anf$##7205759403792821927 :: "GHC.Types.Int"
50:33-50:35::sq :: "[GHC.Types.Int]"
50:37-50:38::lq_anf$##7205759403792821929 :: "GHC.Types.Int"
50:41-50:84::lq_anf$##7205759403792821938 :: "[GHC.Types.Int]"
50:42-50:43::ds_d7kR :: "GHC.Types.Int"
50:51-50:76::lq_anf$##7205759403792821937 :: "{v : [GHC.Types.Int] | len v <= len seqNumbers##a7eW}"
50:58-50:65::lq_anf$##7205759403792821936 :: "GHC.Types.Int -> GHC.Types.Bool"
50:66-50:76::seqNumbers :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | v == seqNumbers##a7eW\n                                        && len v >= 0}"
50:78-50:79::ds_d7kR :: "GHC.Types.Int"
50:82-50:83::lq_anf$##7205759403792821932 :: "GHC.Types.Int"
51:37-51:41::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:44-51:48::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
51:51-51:65::lq_anf$##7205759403792821920 :: "Data.Text.Internal.Text"
51:56-51:65::lq_anf$##7205759403792821919 :: "[GHC.Types.Char]"
59:1-59:11::Lib.getRndMInt :: "{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                               && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                       && 0 < VV##0}) | fst v > 0\n                                                                                        && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                     && 0 < VV##0})"
59:21-59:22::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
59:26-59:27::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
59:31-59:32::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
59:35-59:36::lq_anf$##7205759403792821844 :: "GHC.Types.Int"
60:3-60:9::result :: "GHC.Types.Int"
60:13-60:52::_ :: "(GHC.Types.IO GHC.Types.Int)"
60:23-60:29::lq_anf$##7205759403792821872 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7f1\n                                      && snd v == u##a7f2\n                                      && x_Tuple21 v == l##a7f1\n                                      && x_Tuple22 v == u##a7f2}"
60:24-60:25::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
60:27-60:28::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
60:30-60:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
61:3-61:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
61:10-61:16::result :: "{v : GHC.Types.Int | v == result##a7f3}"
61:23-61:24::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
61:31-61:32::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
62:21-62:39::lq_anf$##7205759403792821854 :: "GHC.Types.Bool"
62:22-62:23::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
62:27-62:28::lq_anf$##7205759403792821849 :: "GHC.Types.Int"
62:32-62:33::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
62:37-62:38::lq_anf$##7205759403792821852 :: "GHC.Types.Int"
62:43-62:50::lq_anf$##7205759403792821855 :: "{v : GHC.Types.Bool | v <=> l##a7f1 > u##a7f2}"
62:44-62:45::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
62:48-62:49::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
62:53-62:69::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
62:57-62:69::lq_anf$##7205759403792821871 :: "[GHC.Types.Char]"
63:21-63:22::l :: "{v : GHC.Types.Int | v == l##a7f1\n                     && v >= 0\n                     && 0 < v}"
63:25-63:26::lq_anf$##7205759403792821859 :: "GHC.Types.Int"
63:30-63:31::u :: "{v : GHC.Types.Int | v == u##a7f2\n                     && v >= 0\n                     && 0 < v}"
63:34-63:35::lq_anf$##7205759403792821862 :: "GHC.Types.Int"
63:38-63:54::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
63:42-63:54::lq_anf$##7205759403792821869 :: "[GHC.Types.Char]"
64:16-64:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
64:20-64:32::lq_anf$##7205759403792821867 :: "[GHC.Types.Char]"