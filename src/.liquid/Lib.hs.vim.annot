1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
20:1-20:31::Lib.genARandomPreFactoredNumberLEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
20:32-20:33::x :: "GHC.Types.Int"
20:36-20:37::x :: "{v : GHC.Types.Int | v == x}"
20:41-20:42::lq_anf$##7205759403792822446 :: "GHC.Types.Int"
20:45-20:49::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
20:52-20:66::lq_anf$##7205759403792822484 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
20:57-20:66::lq_anf$##7205759403792822483 :: "[GHC.Types.Char]"
21:36-21:40::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
21:43-21:57::lq_anf$##7205759403792822481 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
21:49-21:57::lq_anf$##7205759403792822480 :: "(GHC.Types.Int, [GHC.Types.Int])"
21:50-21:51::lq_anf$##7205759403792822475 :: "GHC.Types.Int"
21:53-21:56::lq_anf$##7205759403792822479 :: "[GHC.Types.Int]"
21:54-21:55::lq_anf$##7205759403792822477 :: "GHC.Types.Int"
22:36-22:37::x :: "{v : GHC.Types.Int | v == x}"
22:41-22:42::lq_anf$##7205759403792822452 :: "GHC.Types.Int"
23:3-23:7::rndM :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                          && v > 0\n                                                          && v >= 0\n                                                          && 0 < v\n                                                          && 2 <= v})"
23:11-23:49::_ :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                                        && v > 0\n                                                                        && v >= 0\n                                                                        && 0 < v\n                                                                        && 2 <= v}))"
23:16-23:29::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | 2 <= v})"
23:30-23:49::lq_anf$##7205759403792822461 :: "(GHC.Types.IO GHC.Types.Int)"
23:42-23:48::lq_anf$##7205759403792822460 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x\n                                      && x_Tuple22 v == x}"
23:43-23:44::lq_anf$##7205759403792822459 :: "GHC.Types.Int"
23:46-23:47::x :: "{v : GHC.Types.Int | v == x}"
24:8-24:12::_ :: "{v : (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                               && v > 0\n                                                               && v >= 0\n                                                               && 0 < v\n                                                               && 2 <= v}) | v == rndM}"
25:15-25:19::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
25:22-25:36::lq_anf$##7205759403792822465 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
25:27-25:36::lq_anf$##7205759403792822464 :: "[GHC.Types.Char]"
26:20-26:87::ShortCircuit.$fShortcircuitBool :: "{v : (ShortCircuit.Shortcircuit GHC.Types.Bool) | v == $fShortcircuitBool}"
26:24-26:33::lq_anf$##7205759403792822470 :: "{v : GHC.Types.Bool | v <=> ps <= x}"
26:25-26:27::ps :: "{v : GHC.Types.Int | v == ps}"
26:31-26:32::x :: "{v : GHC.Types.Int | v == x}"
26:34-26:52::lq_anf$##7205759403792822472 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
26:35-26:39::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
26:42-26:51::lq_anf$##7205759403792822471 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
26:48-26:51::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp}"
26:53-26:87::lq_anf$##7205759403792822473 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
26:85-26:86::x :: "{v : GHC.Types.Int | v == x}"
28:9-28:12::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
28:14-28:16::ps :: "GHC.Types.Int"
28:18-28:20::sq :: "{VV : [GHC.Types.Int] | false}"
28:24-28:53::lq_anf$##7205759403792822468 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
28:25-28:35::lq_anf$##7205759403792822466 :: "GHC.Types.Int"
28:33-28:35::sq :: "{VV : [GHC.Types.Int] | false}"
28:37-28:52::lq_anf$##7205759403792822467 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
28:47-28:52::upper :: "{v : GHC.Types.Int | v == upper\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
29:36-29:40::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
29:43-29:57::lq_anf$##7205759403792822457 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
29:48-29:57::lq_anf$##7205759403792822456 :: "[GHC.Types.Char]"
35:1-35:10::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
35:15-35:18::lq_anf$##7205759403792822442 :: "{v : [GHC.Types.Int] | len v == 0}"
35:16-35:17::lq_anf$##7205759403792822441 :: "GHC.Types.Int"
36:15-36:16::ds_d7tt :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:20-36:21::lq_anf$##7205759403792822423 :: "GHC.Types.Int"
36:29-36:50::lq_anf$##7205759403792822428 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
36:49-36:50::ds_d7tt :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:13-37:24::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
37:23-37:24::lq_anf$##7205759403792822431 :: "GHC.Types.Int"
39:10-39:38::lq_anf$##7205759403792822435 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
39:30-39:38::lq_anf$##7205759403792822434 :: "GHC.Types.Int"
39:31-39:33::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
39:36-39:37::lq_anf$##7205759403792822433 :: "GHC.Types.Int"
40:17-40:28::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
40:27-40:28::lq_anf$##7205759403792822438 :: "GHC.Types.Int"
41:20-41:22::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
41:25-41:38::lq_anf$##7205759403792822439 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
41:35-41:38::okN :: "{v : GHC.Types.Int | v == okN\n                     && v >= 0\n                     && 0 < v}"
43:7-43:9::si :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
43:12-43:30::_ :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
43:25-43:30::nGte1 :: "{v : GHC.Types.Int | v == nGte1\n                     && v >= 0\n                     && 0 < v}"
44:15-44:31::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
44:19-44:31::lq_anf$##7205759403792822427 :: "[GHC.Types.Char]"
49:1-49:13::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
49:18-49:19::lq_anf$##7205759403792822419 :: "{v : GHC.Prim.Int# | v == 1}"
50:18-50:27::lq_anf$##7205759403792822408 :: "GHC.Types.Bool"
50:26-50:27::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
50:30-50:31::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
51:18-51:19::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
51:22-51:23::lq_anf$##7205759403792822411 :: "GHC.Types.Int"
51:26-51:46::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
51:39-51:46::lq_anf$##7205759403792822418 :: "GHC.Types.Int"
51:40-51:41::ds_d7tf :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
51:44-51:45::lq_anf$##7205759403792822417 :: "GHC.Types.Int"
52:18-52:34::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
52:22-52:34::lq_anf$##7205759403792822415 :: "[GHC.Types.Char]"
57:1-57:11::Lib.getRndMInt :: "({VV : GHC.Types.Int | VV /= 0\n                       && VV > 0\n                       && VV >= 0\n                       && 0 < VV\n                       && 2 <= VV}, {VV : GHC.Types.Int | VV /= 0\n                                                          && VV > 0\n                                                          && VV >= 0\n                                                          && 0 < VV\n                                                          && 2 <= VV})<\\x1 VV -> {VV : GHC.Types.Int | VV /= 0\n                                                                                                       && VV > 0\n                                                                                                       && VV >= 0\n                                                                                                       && VV >= x1\n                                                                                                       && 0 < VV\n                                                                                                       && 2 <= VV}> -> (GHC.Types.IO GHC.Types.Int)"
57:21-57:60::$dStatefulGen_a7qS :: "{v : (System.Random.Internal.StatefulGen (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) GHC.Types.IO) | v == $dStatefulGen_a7qS}"
57:31-57:37::lq_anf$##7205759403792822444 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l\n                                      && snd v == u\n                                      && x_Tuple21 v == l\n                                      && x_Tuple22 v == u}"
57:32-57:33::l :: "{v : GHC.Types.Int | v == l\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
57:35-57:36::u :: "{v : GHC.Types.Int | v == u\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && v >= l\n                     && 0 < v\n                     && 2 <= v}"
57:38-57:50::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"