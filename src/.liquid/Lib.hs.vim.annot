1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
29:1-29:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
29:21-29:22::l :: "{v : GHC.Types.Int | v == l##a7gr\n                     && v >= 0\n                     && 0 < v}"
29:26-29:27::u :: "{v : GHC.Types.Int | v == u##a7gs\n                     && v >= 0\n                     && 0 < v}"
29:31-29:32::l :: "{v : GHC.Types.Int | v == l##a7gr\n                     && v >= 0\n                     && 0 < v}"
29:35-29:36::lq_anf$##7205759403792822247 :: "GHC.Types.Int"
29:39-29:44::lq_anf$##7205759403792822253 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if l##a7gr > x1 then l##a7gr else x1)}"
29:43-29:44::l :: "{v : GHC.Types.Int | v == l##a7gr\n                     && v >= 0\n                     && 0 < v}"
29:47-29:52::lq_anf$##7205759403792822254 :: "x1:GHC.Types.Int -> {v : GHC.Types.Int | v == (if u##a7gs < x1 then u##a7gs else x1)}"
29:51-29:52::u :: "{v : GHC.Types.Int | v == u##a7gs\n                     && v >= 0\n                     && 0 < v}"
29:57-29:86::lq_anf$##7205759403792822257 :: "(GHC.Types.IO GHC.Types.Int)"
29:67-29:73::lq_anf$##7205759403792822256 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7gr\n                                      && snd v == u##a7gs\n                                      && x_Tuple21 v == l##a7gr\n                                      && x_Tuple22 v == u##a7gs}"
29:68-29:69::l :: "{v : GHC.Types.Int | v == l##a7gr\n                     && v >= 0\n                     && 0 < v}"
29:71-29:72::u :: "{v : GHC.Types.Int | v == u##a7gs\n                     && v >= 0\n                     && 0 < v}"
29:74-29:86::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
30:16-30:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
30:20-30:32::lq_anf$##7205759403792822252 :: "[GHC.Types.Char]"
41:1-41:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
41:14-41:21::lq_anf$##7205759403792822269 :: "{v : [GHC.Types.Int] | len v == 0}"
41:19-41:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
42:14-42:15::ds_d7qU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
42:18-42:19::lq_anf$##7205759403792822261 :: "GHC.Types.Int"
42:22-42:55::GHC.Base.$fMonadIO :: "{v : (GHC.Base.Monad GHC.Types.IO) | v == $fMonadIO}"
42:23-42:33::Lib.getRndMInt :: "x1:{v : ({v : GHC.Types.Int | v >= 0\n                              && 0 < v}, {v : GHC.Types.Int | v >= 0\n                                                              && 0 < v}) | fst v > 0\n                                                                           && fst v <= snd v} -> (GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                                                                                                                    && v >= fst x1\n                                                                                                                                    && 0 < v\n                                                                                                                                    && v <= snd x1})"
42:39-42:47::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
42:49-42:55::lq_anf$##7205759403792822268 :: "(GHC.Types.Int, GHC.Types.Int)"
42:50-42:51::lq_anf$##7205759403792822267 :: "GHC.Types.Int"
42:53-42:54::ds_d7qU :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
43:14-43:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
43:18-43:30::lq_anf$##7205759403792822265 :: "[GHC.Types.Char]"
48:1-48:2::f :: "a -> b c"
48:3-48:7::Lib.>=>: :: "forall a b c .\n(GHC.Base.Monad<[]> a) =>\n(b -> a c) -> (c -> a {VV##662 : [{VV : c | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}) -> b -> a [c]"
48:8-48:9::g :: "a -> b {VV##662 : [{VV : a | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}"
48:12-48:13::f :: "a -> b c"
48:18-48:37::$dFunctor_a7ii :: "{v : (GHC.Base.Functor a) | v == $dFunctor_a7ii}"
48:19-48:20::u :: "a"
48:24-48:29::lq_anf$##7205759403792822227 :: "v_B2:{VV##759 : [a] | len $VV##759##k_ >= 0} -> {v : [a] | head v == u##a7gw\n                                                           && len v == 1 + len v_B2\n                                                           && tail v == v_B2}"
48:25-48:26::u :: "{VV : a | VV == u##a7gw}"
48:34-48:37::lq_anf$##7205759403792822228 :: "a {v : [{VV : b | $VV##657##k_ <= $lq_tmp$x##652##k_}] | len $VV##662##k_ >= 0}"
48:36-48:37::u :: "{VV : a | VV == u##a7gw}"
56:1-56:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
56:34-56:35::x :: "GHC.Types.Int"
56:38-56:39::x :: "{v : GHC.Types.Int | v == x##a7gx}"
56:43-56:44::lq_anf$##7205759403792822271 :: "GHC.Types.Int"
56:47-56:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
56:54-56:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
56:61-56:75::lq_anf$##7205759403792822296 :: "Data.Text.Internal.Text"
56:66-56:75::lq_anf$##7205759403792822295 :: "[GHC.Types.Char]"
57:38-57:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
57:45-57:59::lq_anf$##7205759403792822293 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
57:51-57:59::lq_anf$##7205759403792822292 :: "(GHC.Types.Int, [GHC.Types.Int])"
57:52-57:53::lq_anf$##7205759403792822287 :: "GHC.Types.Int"
57:55-57:58::lq_anf$##7205759403792822291 :: "[GHC.Types.Int]"
57:56-57:57::lq_anf$##7205759403792822289 :: "GHC.Types.Int"
58:38-58:48::lq_anf$##7205759403792822284 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= x##a7gx}])"
58:47-58:48::x :: "{v : GHC.Types.Int | v == x##a7gx}"
58:53-58:69::lq_anf$##7205759403792822285 :: "[GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
58:68-58:69::x :: "{v : GHC.Types.Int | v == x##a7gx}"
60:5-60:19::haltOrContinue :: "GHC.Types.Int -> [GHC.Types.Int] -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
60:20-60:22::n' :: "GHC.Types.Int"
60:23-60:30::solnSet :: "[GHC.Types.Int]"
61:9-61:11::lq_anf$##7205759403792822280 :: "GHC.Types.Int"
61:15-61:17::n' :: "{v : GHC.Types.Int | v == n'##a7gA}"
61:20-61:24::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
61:27-61:39::lq_anf$##7205759403792822283 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
61:33-61:39::result :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == result##a7jT}"
62:21-62:56::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
62:54-62:56::n' :: "{v : GHC.Types.Int | v == n'##a7gA}"
64:9-64:15::result :: "(GHC.Types.Int, [GHC.Types.Int])"
64:21-64:23::sq :: "{VV##1757 : [GHC.Types.Int] | false}"
64:27-64:66::lq_anf$##7205759403792822278 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
64:28-64:38::lq_anf$##7205759403792822276 :: "GHC.Types.Int"
64:36-64:38::sq :: "{VV##1757 : [GHC.Types.Int] | false}"
64:40-64:65::lq_anf$##7205759403792822277 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7gB}"
64:47-64:57::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
64:58-64:65::solnSet :: "{v : [GHC.Types.Int] | v == solnSet##a7gB\n                       && len v >= 0}"
70:1-70:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
70:12-70:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
70:16-70:17::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"
70:20-70:21::lq_anf$##7205759403792822235 :: "GHC.Types.Int"
70:24-70:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
70:28-70:40::lq_anf$##7205759403792822243 :: "[GHC.Types.Char]"
71:16-71:24::lq_anf$##7205759403792822240 :: "GHC.Types.Bool"
71:17-71:18::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"
71:22-71:23::lq_anf$##7205759403792822239 :: "GHC.Types.Int"
71:28-71:37::lq_anf$##7205759403792822241 :: "GHC.Types.Bool"
71:36-71:37::n :: "{v : GHC.Types.Int | v == n##a7gF\n                     && v >= 0\n                     && 0 < v}"