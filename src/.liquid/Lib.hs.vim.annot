1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
25:1-25:11::Lib.getRndMInt :: "x1:{v : ({VV##0 : GHC.Types.Int | VV##0 >= 0\n                                  && 0 < VV##0}, {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                          && 0 < VV##0}) | fst v > 0\n                                                                                           && fst v <= snd v} -> (GHC.Types.IO {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                                                                                        && VV##0 >= fst x1\n                                                                                                                                                        && 0 < VV##0\n                                                                                                                                                        && VV##0 <= snd x1})"
25:21-25:22::l :: "{v : GHC.Types.Int | v == l##a7i1\n                     && v >= 0\n                     && 0 < v}"
25:26-25:27::u :: "{v : GHC.Types.Int | v == u##a7i2\n                     && v >= 0\n                     && 0 < v}"
25:31-25:32::l :: "{v : GHC.Types.Int | v == l##a7i1\n                     && v >= 0\n                     && 0 < v}"
25:35-25:36::lq_anf$##7205759403792822261 :: "GHC.Types.Int"
26:3-26:9::result :: "GHC.Types.Int"
26:13-26:42::_ :: "(GHC.Types.IO GHC.Types.Int)"
26:23-26:29::lq_anf$##7205759403792822267 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l##a7i1\n                                      && snd v == u##a7i2\n                                      && x_Tuple21 v == l##a7i1\n                                      && x_Tuple22 v == u##a7i2}"
26:24-26:25::l :: "{v : GHC.Types.Int | v == l##a7i1\n                     && v >= 0\n                     && 0 < v}"
26:27-26:28::u :: "{v : GHC.Types.Int | v == u##a7i2\n                     && v >= 0\n                     && 0 < v}"
26:30-26:42::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
27:3-27:7::_ :: "GHC.Types.Int -> (GHC.Types.IO GHC.Types.Int)"
27:10-27:16::result :: "{v : GHC.Types.Int | v == result##a7i3}"
27:23-27:24::u :: "{v : GHC.Types.Int | v == u##a7i2\n                     && v >= 0\n                     && 0 < v}"
27:31-27:32::l :: "{v : GHC.Types.Int | v == l##a7i1\n                     && v >= 0\n                     && 0 < v}"
28:16-28:32::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
28:20-28:32::lq_anf$##7205759403792822266 :: "[GHC.Types.Char]"
35:1-35:9::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
35:14-35:21::lq_anf$##7205759403792822283 :: "{v : [GHC.Types.Int] | len v == 0}"
35:19-35:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
36:14-36:15::ds_d7rg :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:18-36:19::lq_anf$##7205759403792822273 :: "GHC.Types.Int"
37:3-37:7::seed :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
37:11-37:28::_ :: "(GHC.Types.IO {v : GHC.Types.Int | v >= 0\n                                   && 0 < v})"
37:22-37:28::lq_anf$##7205759403792822280 :: "(GHC.Types.Int, GHC.Types.Int)"
37:23-37:24::lq_anf$##7205759403792822279 :: "GHC.Types.Int"
37:26-37:27::ds_d7rg :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
38:3-38:32::GHC.Base.$fFunctorIO :: "{v : (GHC.Base.Functor GHC.Types.IO) | v == $fFunctorIO}"
38:8-38:16::lq_anf$##7205759403792822281 :: "v_B2:{VV##1252 : [GHC.Types.Int] | len $VV##1252##k_ >= 0} -> {v : [GHC.Types.Int] | head v == seed##a7i5\n                                                                                     && len v == 1 + len v_B2\n                                                                                     && tail v == v_B2}"
38:9-38:13::seed :: "{v : GHC.Types.Int | v == seed##a7i5\n                     && v >= 0\n                     && 0 < v}"
38:17-38:32::lq_anf$##7205759403792822282 :: "(GHC.Types.IO [{v : GHC.Types.Int | v >= 0\n                                    && 0 < v\n                                    && 1 <= v\n                                    && v <= seed##a7i5}])"
38:27-38:31::seed :: "{v : GHC.Types.Int | v == seed##a7i5\n                     && v >= 0\n                     && 0 < v}"
39:14-39:30::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
39:18-39:30::lq_anf$##7205759403792822277 :: "[GHC.Types.Char]"
46:1-46:33::Lib.genARandomPreFactoredNumberLTEn' :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
46:34-46:35::x :: "GHC.Types.Int"
46:38-46:39::x :: "{v : GHC.Types.Int | v == x##a7i6}"
46:43-46:44::lq_anf$##7205759403792822285 :: "GHC.Types.Int"
46:47-46:51::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
46:54-46:58::_ :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
46:61-46:75::lq_anf$##7205759403792822308 :: "Data.Text.Internal.Text"
46:66-46:75::lq_anf$##7205759403792822307 :: "[GHC.Types.Char]"
47:38-47:42::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
47:45-47:59::lq_anf$##7205759403792822305 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
47:51-47:59::lq_anf$##7205759403792822304 :: "(GHC.Types.Int, [GHC.Types.Int])"
47:52-47:53::lq_anf$##7205759403792822299 :: "GHC.Types.Int"
47:55-47:58::lq_anf$##7205759403792822303 :: "[GHC.Types.Int]"
47:56-47:57::lq_anf$##7205759403792822301 :: "GHC.Types.Int"
49:3-49:10::solnSet :: "[{v : GHC.Types.Int | v >= 0\n                      && 0 < v\n                      && 1 <= v\n                      && v <= x##a7i6}]"
49:14-49:24::Lib.makeList :: "x1:{VV##0 : GHC.Types.Int | VV##0 >= 0\n                            && 0 < VV##0} -> (GHC.Types.IO [{VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                                     && 0 < VV##0\n                                                                                     && 1 <= VV##0\n                                                                                     && VV##0 <= x1}])"
49:23-49:24::x :: "{v : GHC.Types.Int | v == x##a7i6}"
50:7-50:10::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
50:12-50:14::ps :: "GHC.Types.Int"
50:16-50:18::sq :: "{VV##1485 : [GHC.Types.Int] | false}"
50:22-50:61::lq_anf$##7205759403792822292 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
50:23-50:33::lq_anf$##7205759403792822290 :: "GHC.Types.Int"
50:31-50:33::sq :: "{VV##1485 : [GHC.Types.Int] | false}"
50:35-50:60::lq_anf$##7205759403792822291 :: "{v : [GHC.Types.Int] | len v <= len solnSet##a7i8}"
50:42-50:52::Lib.isPrimeOr1 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v} -> GHC.Types.Bool"
50:53-50:60::solnSet :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v\n                           && 1 <= v\n                           && v <= x##a7i6}] | v == solnSet##a7i8\n                                               && len v >= 0}"
51:3-51:72::Data.Bool.HT.Private.if' :: "{VV : forall a . GHC.Types.Bool -> a -> a -> a | VV == if'}"
51:7-51:16::lq_anf$##7205759403792822294 :: "{v : GHC.Types.Bool | v <=> ps##a7kE <= x##a7i6}"
51:8-51:10::ps :: "{v : GHC.Types.Int | v == ps##a7kE}"
51:14-51:15::x :: "{v : GHC.Types.Int | v == x##a7i6}"
51:17-51:35::lq_anf$##7205759403792822296 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:18-51:22::_ :: "(Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:25-51:34::lq_anf$##7205759403792822295 :: "{v : (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
51:31-51:34::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp##a7kB}"
51:36-51:72::lq_anf$##7205759403792822297 :: "(GHC.Types.IO (Data.Either.Either Data.Text.Internal.Text (GHC.Types.Int, [GHC.Types.Int])))"
51:70-51:71::x :: "{v : GHC.Types.Int | v == x##a7i6}"
57:1-57:11::Lib.isPrimeOr1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0} -> GHC.Types.Bool"
57:12-57:13::n :: "{VV##0 : GHC.Types.Int | VV##0 >= 0\n                         && 0 < VV##0}"
57:16-57:17::n :: "{v : GHC.Types.Int | v == n##a7ic\n                     && v >= 0\n                     && 0 < v}"
57:20-57:21::lq_anf$##7205759403792822249 :: "GHC.Types.Int"
57:24-57:40::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
57:28-57:40::lq_anf$##7205759403792822257 :: "[GHC.Types.Char]"
58:16-58:24::lq_anf$##7205759403792822254 :: "GHC.Types.Bool"
58:17-58:18::n :: "{v : GHC.Types.Int | v == n##a7ic\n                     && v >= 0\n                     && 0 < v}"
58:22-58:23::lq_anf$##7205759403792822253 :: "GHC.Types.Int"
58:28-58:37::lq_anf$##7205759403792822255 :: "GHC.Types.Bool"
58:36-58:37::n :: "{v : GHC.Types.Int | v == n##a7ic\n                     && v >= 0\n                     && 0 < v}"