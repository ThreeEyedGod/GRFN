1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
14:1-14:31::Lib.genARandomPreFactoredNumberLEn :: "GHC.Types.Int -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
14:32-14:33::x :: "GHC.Types.Int"
14:36-14:37::x :: "{v : GHC.Types.Int | v == x}"
14:41-14:42::lq_anf$##7205759403792825513 :: "GHC.Types.Int"
14:46-14:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
14:53-14:67::lq_anf$##7205759403792825551 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
14:58-14:67::lq_anf$##7205759403792825550 :: "[GHC.Types.Char]"
15:46-15:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
15:53-15:67::lq_anf$##7205759403792825548 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
15:59-15:67::lq_anf$##7205759403792825547 :: "(GHC.Types.Int, [GHC.Types.Int])"
15:60-15:61::lq_anf$##7205759403792825542 :: "GHC.Types.Int"
15:63-15:66::lq_anf$##7205759403792825546 :: "[GHC.Types.Int]"
15:64-15:65::lq_anf$##7205759403792825544 :: "GHC.Types.Int"
16:36-16:37::x :: "{v : GHC.Types.Int | v == x}"
16:41-16:42::lq_anf$##7205759403792825519 :: "GHC.Types.Int"
17:49-17:53::rndM :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                          && v > 0\n                                                          && v >= 0\n                                                          && 0 < v\n                                                          && 2 <= v})"
17:57-17:95::_ :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                                        && v > 0\n                                                                        && v >= 0\n                                                                        && 0 < v\n                                                                        && 2 <= v}))"
17:62-17:75::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | 2 <= v})"
17:76-17:95::lq_anf$##7205759403792825528 :: "(GHC.Types.IO GHC.Types.Int)"
17:88-17:94::lq_anf$##7205759403792825527 :: "{v : (GHC.Types.Int, GHC.Types.Int) | snd v == x\n                                      && x_Tuple22 v == x}"
17:89-17:90::lq_anf$##7205759403792825526 :: "GHC.Types.Int"
17:92-17:93::x :: "{v : GHC.Types.Int | v == x}"
18:54-18:58::_ :: "{v : (Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v /= 0\n                                                               && v > 0\n                                                               && v >= 0\n                                                               && 0 < v\n                                                               && 2 <= v}) | v == rndM}"
19:63-19:67::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
19:70-19:84::lq_anf$##7205759403792825532 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
19:75-19:84::lq_anf$##7205759403792825531 :: "[GHC.Types.Char]"
20:69-20:136::ShortCircuit.$fShortcircuitBool :: "{v : (ShortCircuit.Shortcircuit GHC.Types.Bool) | v == $fShortcircuitBool}"
20:73-20:82::lq_anf$##7205759403792825537 :: "{v : GHC.Types.Bool | v <=> ps <= x}"
20:74-20:76::ps :: "{v : GHC.Types.Int | v == ps}"
20:80-20:81::x :: "{v : GHC.Types.Int | v == x}"
20:83-20:101::lq_anf$##7205759403792825539 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
20:84-20:88::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
20:91-20:100::lq_anf$##7205759403792825538 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | not (isLeft v)}"
20:97-20:100::rsp :: "{v : (GHC.Types.Int, [GHC.Types.Int]) | v == rsp}"
20:102-20:136::lq_anf$##7205759403792825540 :: "(GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
20:134-20:135::x :: "{v : GHC.Types.Int | v == x}"
21:79-21:82::rsp :: "(GHC.Types.Int, [GHC.Types.Int])"
21:84-21:86::ps :: "GHC.Types.Int"
21:88-21:90::sq :: "{VV : [GHC.Types.Int] | false}"
21:94-21:123::lq_anf$##7205759403792825535 :: "({v : GHC.Types.Int | false}, {v : [GHC.Types.Int] | false})<\\_ VV -> {v : [GHC.Types.Int] | false}>"
21:95-21:105::lq_anf$##7205759403792825533 :: "GHC.Types.Int"
21:103-21:105::sq :: "{VV : [GHC.Types.Int] | false}"
21:107-21:122::lq_anf$##7205759403792825534 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
21:117-21:122::upper :: "{v : GHC.Types.Int | v == upper\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
22:46-22:50::_ :: "(Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) -> (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])))"
22:53-22:67::lq_anf$##7205759403792825524 :: "{v : (Data.Either.Either [GHC.Types.Char] (GHC.Types.Int, [GHC.Types.Int])) | isLeft v}"
22:58-22:67::lq_anf$##7205759403792825523 :: "[GHC.Types.Char]"
27:1-27:10::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
27:32-27:35::lq_anf$##7205759403792825509 :: "{v : [GHC.Types.Int] | len v == 0}"
27:33-27:34::lq_anf$##7205759403792825508 :: "GHC.Types.Int"
28:15-28:16::ds_d89R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
28:20-28:21::lq_anf$##7205759403792825490 :: "GHC.Types.Int"
28:37-28:58::lq_anf$##7205759403792825495 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
28:57-28:58::ds_d89R :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
29:43-29:54::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
29:53-29:54::lq_anf$##7205759403792825498 :: "GHC.Types.Int"
33:58-33:84::lq_anf$##7205759403792825502 :: "(Data.Either.Either [GHC.Types.Char] {v : GHC.Types.Int | v >= 0\n                                                          && 0 < v})"
33:78-33:84::lq_anf$##7205759403792825501 :: "GHC.Types.Int"
33:79-33:81::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
33:82-33:83::lq_anf$##7205759403792825500 :: "GHC.Types.Int"
34:67-34:78::Lib.createSeq :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : [{VV : GHC.Types.Int | VV >= 0\n                                                                 && 0 < VV}] | 1 <= len VV}"
34:77-34:78::lq_anf$##7205759403792825505 :: "GHC.Types.Int"
35:74-35:76::si :: "{v : GHC.Types.Int | v == si\n                     && v >= 0\n                     && 0 < v}"
35:79-35:92::lq_anf$##7205759403792825506 :: "{v : [{v : GHC.Types.Int | v >= 0\n                           && 0 < v}] | 1 <= len v}"
35:89-35:92::okN :: "{v : GHC.Types.Int | v == okN\n                     && v >= 0\n                     && 0 < v}"
36:55-36:57::si :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:60-36:78::_ :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
36:73-36:78::nGte1 :: "{v : GHC.Types.Int | v == nGte1\n                     && v >= 0\n                     && 0 < v}"
37:32-37:48::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
37:36-37:48::lq_anf$##7205759403792825494 :: "[GHC.Types.Char]"
43:1-43:13::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
43:30-43:31::lq_anf$##7205759403792825486 :: "{v : GHC.Prim.Int# | v == 1}"
44:18-44:27::lq_anf$##7205759403792825475 :: "GHC.Types.Bool"
44:26-44:27::ds_d88Y :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
44:30-44:31::ds_d88Y :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:18-45:19::ds_d88Y :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:22-45:23::lq_anf$##7205759403792825478 :: "GHC.Types.Int"
45:30-45:48::Lib.firstPrimeLE :: "{VV : GHC.Types.Int | VV >= 0\n                      && 0 < VV} -> {VV : GHC.Types.Int | VV >= 0\n                                                          && 0 < VV}"
45:43-45:48::lq_anf$##7205759403792825485 :: "GHC.Types.Int"
45:44-45:45::ds_d88Y :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
45:46-45:47::lq_anf$##7205759403792825484 :: "GHC.Types.Int"
46:30-46:46::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
46:34-46:46::lq_anf$##7205759403792825482 :: "[GHC.Types.Char]"
52:1-52:11::Lib.getRndMInt :: "({VV : GHC.Types.Int | VV /= 0\n                       && VV > 0\n                       && VV >= 0\n                       && 0 < VV\n                       && 2 <= VV}, {VV : GHC.Types.Int | VV /= 0\n                                                          && VV > 0\n                                                          && VV >= 0\n                                                          && 0 < VV\n                                                          && 2 <= VV})<\\x1 VV -> {VV : GHC.Types.Int | VV /= 0\n                                                                                                       && VV > 0\n                                                                                                       && VV >= 0\n                                                                                                       && VV >= x1\n                                                                                                       && 0 < VV\n                                                                                                       && 2 <= VV}> -> (GHC.Types.IO GHC.Types.Int)"
52:20-52:59::$dStatefulGen_a86t :: "{v : (System.Random.Internal.StatefulGen (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) GHC.Types.IO) | v == $dStatefulGen_a86t}"
52:30-52:36::lq_anf$##7205759403792825511 :: "{v : (GHC.Types.Int, GHC.Types.Int) | fst v == l\n                                      && snd v == u\n                                      && x_Tuple21 v == l\n                                      && x_Tuple22 v == u}"
52:31-52:32::l :: "{v : GHC.Types.Int | v == l\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && 0 < v\n                     && 2 <= v}"
52:34-52:35::u :: "{v : GHC.Types.Int | v == u\n                     && v /= 0\n                     && v > 0\n                     && v >= 0\n                     && v >= l\n                     && 0 < v\n                     && 2 <= v}"
52:37-52:49::System.Random.Stateful.globalStdGen :: "{v : (System.Random.Stateful.AtomicGenM System.Random.Internal.StdGen) | v == globalStdGen}"
57:1-57:10::Lib.fromRight :: "forall a b .\n{VV : (Data.Either.Either {VV : a | false} b) | false} -> b"
57:23-57:24::v :: "{VV : a | VV == v}"
58:15-58:27::$dIP_a86g :: "{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a86g}"
58:21-58:27::lq_anf$##7205759403792825467 :: "[GHC.Types.Char]"