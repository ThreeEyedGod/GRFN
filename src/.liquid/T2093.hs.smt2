(set-option :auto-config false)
(set-option :model true)
(set-option :model-partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Types.LT () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803882$35$$35$d2FQ () Int)
(declare-fun GHC.Types.$36$tcNat () Int)
(declare-fun T2093.$36$fNumUnsigned () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun lq_tmp$36$x$35$$35$1203 () Int)
(declare-fun GHC.Classes.C$58$Ord () Int)
(declare-fun eta_B1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1309 () Int)
(declare-fun lit$36$Unsigned () Str)
(declare-fun GHC.Natural.$36$WNatJ$35$ () Int)
(declare-fun GHC.Types.True () Int)
(declare-fun lit$36$T2093 () Str)
(declare-fun lq_tmp$36$x$35$$35$1189 () Int)
(declare-fun lq_tmp$36$x$35$$35$1101 () Int)
(declare-fun lq_tmp$36$x$35$$35$966 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803878$35$$35$d2FM () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun n () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803915$35$$35$d2Gn () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Natural.NatS$35$ () Int)
(declare-fun lit$36$grfn$45$0.1.0.0$45$inplace () Str)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun Data.Type.Equality.Refl () Int)
(declare-fun lq_tmp$36$x$35$$35$972 () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun Data.Proxy.Proxy () Int)
(declare-fun T2093.$36$fOrdUnsigned () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803907$35$$35$d2Gf () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803909$35$$35$d2Gh () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803905$35$$35$d2Gd () Int)
(declare-fun fix$36$$36$c$60$$61$$35$$35$a1QZ () Int)
(declare-fun papp4 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803881$35$$35$d2FP () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803903$35$$35$d2Gb () Int)
(declare-fun GHC.Num.$36$dm$45$ () Int)
(declare-fun GHC.TypeLits.C$58$KnownSymbol () Int)
(declare-fun eta_B2 () Int)
(declare-fun lit$36$$39$U () Str)
(declare-fun fix$36$$36$ccompare$35$$35$a1QN () Int)
(declare-fun GHC.Classes.$36$dm$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$964 () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803879$35$$35$d2FN () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_tmp$36$x$35$$35$1103 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Classes.$36$dm$61$$61$ () Int)
(declare-fun fix$36$$36$c$42$$35$$35$a1RF () Int)
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun lq_tmp$36$x$35$$35$970 () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803876$35$$35$d2FK () Int)
(declare-fun GHC.Types.LiftedRep () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun fix$36$$36$c$62$$35$$35$a1R5 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803874$35$$35$d2FI () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a1Qu () Int)
(declare-fun GHC.Types.W$35$ () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Num.$36$dmnegate () Int)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun lq_tmp$36$x$35$$35$968 () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun tail () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Classes.$36$dm$60$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803913$35$$35$d2Gl () Int)
(declare-fun GHC.Types.False () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun T2093.U () Int)
(declare-fun lq_tmp$36$x$35$$35$967 () Int)
(declare-fun GHC.Natural.NatJ$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803875$35$$35$d2FJ () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun Control.Exception.Base.noMethodBindingError () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$42$ () Str)
(declare-fun lq_tmp$36$x$35$$35$1326 () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun fix$36$$36$cmax$35$$35$a1Rh () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun fix$36$$36$csignum$35$$35$a1RP () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$abs () Str)
(declare-fun fix$36$$36$c$43$$35$$35$a1Rx () Int)
(declare-fun fix$36$$36$c$60$$35$$35$a1QT () Int)
(declare-fun fix$36$$36$dKnownNat_a1Rv () Int)
(declare-fun GHC.TypeNats.SomeNat () Int)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803908$35$$35$d2Gg () Int)
(declare-fun fix$36$$36$cabs$35$$35$a1RN () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803880$35$$35$d2FO () Int)
(declare-fun lq_tmp$36$x$35$$35$1353 () Int)
(declare-fun head () Int)
(declare-fun GHC.Classes.$36$dm$60$$61$ () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803920$35$$35$d2Gs () Int)
(declare-fun GHC.Types.UnliftedRep () Int)
(declare-fun GHC.TypeNats.C$58$KnownNat () Int)
(declare-fun lq_tmp$36$x$35$$35$1102 () Int)
(declare-fun lq_tmp$36$x$35$$35$965 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1065 () Int)
(declare-fun lq_tmp$36$x$35$$35$1223 () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a1QA () Int)
(declare-fun lq_tmp$36$x$35$$35$973 () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun fix$36$$36$krep_a1RW () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun GHC.Natural.$36$tcNatural () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun fix$36$$36$cfromInteger$35$$35$a1RR () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun GHC.TypeLits.SomeSymbol () Int)
(declare-fun fix$36$$36$krep_a1RY () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun fix$36$$36$c$62$$61$$35$$35$a1Rb () Int)
(declare-fun lq_tmp$36$x$35$$35$969 () Int)
(declare-fun fix$36$$36$cmin$35$$35$a1Rn () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun fix$36$$36$cnegate$35$$35$a1RH () Int)
(declare-fun GHC.Classes.$36$dmcompare () Int)
(declare-fun lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$fromInteger () Str)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun GHC.Classes.$36$dmmin () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_tmp$36$x$35$$35$1237 () Int)
(declare-fun Data.Type.Equality.$36$WRefl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803877$35$$35$d2FL () Int)
(declare-fun lq_tmp$36$x$35$$35$971 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lq_tmp$36$x$35$$35$1333 () Int)
(declare-fun GHC.Num.C$58$Num () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$43$ () Str)
(declare-fun lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$signum () Str)
(declare-fun GHC.Classes.$36$dmmax () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun T2093.$36$fEqUnsigned () Int)
(declare-fun GHC.Classes.$36$dm$62$$61$ () Int)
(declare-fun fix$36$$36$c$45$$35$$35$a1Rz () Int)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(assert (distinct lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$signum lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$43$ lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$fromInteger lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$abs lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$42$ lit$36$$39$U lit$36$grfn$45$0.1.0.0$45$inplace lit$36$T2093 lit$36$Unsigned))
(assert (distinct GHC.Types.Word8Rep GHC.Types.Word64Rep GHC.Types.Int32Rep GHC.Types.UnliftedRep GHC.Types.DoubleRep GHC.Types.IntRep GHC.Types.WordRep GHC.Types.Word16Rep GHC.Types.Int16Rep GHC.Types.FloatRep GHC.Types.AddrRep GHC.Types.LiftedRep GHC.Types.Int64Rep GHC.Types.Int8Rep GHC.Types.Word32Rep))

(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))

(assert (= (strLen lit$36$Unsigned) 8))
(assert (= (strLen lit$36$T2093) 5))
(assert (= (strLen lit$36$grfn$45$0.1.0.0$45$inplace) 20))
(assert (= (strLen lit$36$$39$U) 2))
(assert (= (strLen lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$42$) 23))
(assert (= (strLen lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$abs) 25))
(assert (= (strLen lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$fromInteger) 33))
(assert (= (strLen lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$$43$) 23))
(assert (= (strLen lit$36$src$47$T2093.hs$58$14$58$10$45$39$124$signum) 28))
(push 1)
(push 1)
(pop 1)
(pop 1)
(exit)
