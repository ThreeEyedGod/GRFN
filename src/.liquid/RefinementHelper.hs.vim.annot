1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
48:1-48:5::RefinementHelper.pow2 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0}"
48:10-48:11::lq_anf$##7205759403792815345 :: "{v : GHC.Prim.Int# | v == 1}"
49:10-49:11::lq_anf$##7205759403792815340 :: "GHC.Types.Int"
49:14-49:26::lq_anf$##7205759403792815344 :: "{v : GHC.Types.Int | v >= 0}"
49:19-49:26::lq_anf$##7205759403792815343 :: "GHC.Types.Int"
49:20-49:21::ds_d5DO :: "{v : GHC.Types.Int | v >= 0}"
49:24-49:25::lq_anf$##7205759403792815342 :: "GHC.Types.Int"
57:1-57:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
69:1-69:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
75:1-75:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
75:10-75:11::n :: "GHC.Types.Int"
75:17-75:18::n :: "{v : GHC.Types.Int | v == n##a1u8}"
75:21-75:22::lq_anf$##7205759403792815347 :: "GHC.Types.Int"
75:28-75:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
75:33-75:42::lq_anf$##7205759403792815351 :: "[GHC.Types.Char]"
75:48-75:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
75:54-75:55::n :: "{v : GHC.Types.Int | v == n##a1u8}"