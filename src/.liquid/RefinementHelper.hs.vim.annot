1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
12:1-12:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
22:1-22:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
26:1-26:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
26:10-26:11::n :: "GHC.Types.Int"
26:17-26:18::n :: "{v : GHC.Types.Int | v == n}"
26:21-26:22::lq_anf$##7205759403792814818 :: "GHC.Types.Int"
26:28-26:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
26:33-26:42::lq_anf$##7205759403792814822 :: "[GHC.Types.Char]"
26:48-26:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
26:54-26:55::n :: "{v : GHC.Types.Int | v == n}"
30:1-30:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
34:1-34:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
34:9-34:10::n :: "GHC.Types.Int"
34:16-34:17::n :: "{v : GHC.Types.Int | v == n}"
34:20-34:21::lq_anf$##7205759403792814812 :: "GHC.Types.Int"
34:27-34:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
34:32-34:41::lq_anf$##7205759403792814816 :: "[GHC.Types.Char]"
34:47-34:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
34:53-34:54::n :: "{v : GHC.Types.Int | v == n}"