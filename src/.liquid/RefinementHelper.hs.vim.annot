1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
28:1-28:12::RefinementHelper.descPosList :: "[{VV##0 : GHC.Types.Int | VV##0 >= 0\n                          && 0 < VV##0}] -> GHC.Types.Bool"
28:18-28:22::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
29:17-29:21::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
39:1-39:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
51:1-51:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
57:1-57:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
57:10-57:11::n :: "GHC.Types.Int"
57:17-57:18::n :: "{v : GHC.Types.Int | v == n##a1Eg}"
57:21-57:22::lq_anf$##7205759403792815473 :: "GHC.Types.Int"
57:28-57:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
57:33-57:42::lq_anf$##7205759403792815477 :: "[GHC.Types.Char]"
57:48-57:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
57:54-57:55::n :: "{v : GHC.Types.Int | v == n##a1Eg}"
63:1-63:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
69:1-69:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
69:9-69:10::n :: "GHC.Types.Int"
69:16-69:17::n :: "{v : GHC.Types.Int | v == n##a1Eh}"
69:20-69:21::lq_anf$##7205759403792815467 :: "GHC.Types.Int"
69:27-69:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
69:32-69:41::lq_anf$##7205759403792815471 :: "[GHC.Types.Char]"
69:47-69:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
69:53-69:54::n :: "{v : GHC.Types.Int | v == n##a1Eh}"