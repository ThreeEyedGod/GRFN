1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
44:1-44:11::RefinementHelper.mustGoDown :: "[GHC.Types.Int]<\\x1 VV -> {VV : GHC.Types.Int | x1 >= VV}>"
44:15-44:16::lq_anf$##7205759403792815157 :: "GHC.Types.Int"
44:18-44:19::lq_anf$##7205759403792815159 :: "GHC.Types.Int"
44:21-44:22::lq_anf$##7205759403792815161 :: "GHC.Types.Int"
51:1-51:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
63:1-63:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
69:1-69:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
69:10-69:11::n :: "GHC.Types.Int"
69:17-69:18::n :: "{v : GHC.Types.Int | v == n##a1rX}"
69:21-69:22::lq_anf$##7205759403792815189 :: "GHC.Types.Int"
69:28-69:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
69:33-69:42::lq_anf$##7205759403792815193 :: "[GHC.Types.Char]"
69:48-69:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
69:54-69:55::n :: "{v : GHC.Types.Int | v == n##a1rX}"