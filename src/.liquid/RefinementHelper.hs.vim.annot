1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
42:1-42:11::RefinementHelper.mustGoDown :: "[GHC.Num.Integer.Integer]<\\x1 VV -> {VV : GHC.Num.Integer.Integer | x1 >= VV}>"
42:15-42:16::lq_anf$##7205759403792815215 :: "GHC.Num.Integer.Integer"
42:18-42:19::lq_anf$##7205759403792815217 :: "GHC.Num.Integer.Integer"
42:21-42:22::lq_anf$##7205759403792815219 :: "GHC.Num.Integer.Integer"
49:1-49:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
61:1-61:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
67:1-67:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
67:10-67:11::n :: "GHC.Types.Int"
67:17-67:18::n :: "{v : GHC.Types.Int | v == n##a1sw}"
67:21-67:22::lq_anf$##7205759403792815253 :: "GHC.Types.Int"
67:28-67:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
67:33-67:42::lq_anf$##7205759403792815257 :: "[GHC.Types.Char]"
67:48-67:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
67:54-67:55::n :: "{v : GHC.Types.Int | v == n##a1sw}"
73:1-73:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
79:1-79:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
79:9-79:10::n :: "GHC.Types.Int"
79:16-79:17::n :: "{v : GHC.Types.Int | v == n##a1sx}"
79:20-79:21::lq_anf$##7205759403792815247 :: "GHC.Types.Int"
79:27-79:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
79:32-79:41::lq_anf$##7205759403792815251 :: "[GHC.Types.Char]"
79:47-79:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
79:53-79:54::n :: "{v : GHC.Types.Int | v == n##a1sx}"