1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
43:1-43:5::RefinementHelper.pow2 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0}"
43:10-43:11::lq_anf$##7205759403792815476 :: "{v : GHC.Prim.Int# | v == 1}"
44:10-44:11::lq_anf$##7205759403792815471 :: "GHC.Types.Int"
44:14-44:26::lq_anf$##7205759403792815475 :: "{v : GHC.Types.Int | v >= 0}"
44:19-44:26::lq_anf$##7205759403792815474 :: "GHC.Types.Int"
44:20-44:21::ds_d5FV :: "{v : GHC.Types.Int | v >= 0}"
44:24-44:25::lq_anf$##7205759403792815473 :: "GHC.Types.Int"
52:1-52:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
64:1-64:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
70:1-70:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
70:10-70:11::n :: "GHC.Types.Int"
70:17-70:18::n :: "{v : GHC.Types.Int | v == n##a1wt}"
70:21-70:22::lq_anf$##7205759403792815478 :: "GHC.Types.Int"
70:28-70:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
70:33-70:42::lq_anf$##7205759403792815482 :: "[GHC.Types.Char]"
70:48-70:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
70:54-70:55::n :: "{v : GHC.Types.Int | v == n##a1wt}"