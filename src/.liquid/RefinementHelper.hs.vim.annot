1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
7:1-7:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
18:1-18:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
22:1-22:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
22:10-22:11::n :: "GHC.Types.Int"
22:17-22:18::n :: "{v : GHC.Types.Int | v == n}"
22:21-22:22::lq_anf$##7205759403792800766 :: "GHC.Types.Int"
22:28-22:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
22:33-22:42::lq_anf$##7205759403792800770 :: "[GHC.Types.Char]"
22:48-22:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
22:54-22:55::n :: "{v : GHC.Types.Int | v == n}"
26:1-26:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
30:1-30:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
30:9-30:10::n :: "GHC.Types.Int"
30:16-30:17::n :: "{v : GHC.Types.Int | v == n}"
30:20-30:21::lq_anf$##7205759403792800760 :: "GHC.Types.Int"
30:27-30:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
30:32-30:41::lq_anf$##7205759403792800764 :: "[GHC.Types.Char]"
30:47-30:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
30:53-30:54::n :: "{v : GHC.Types.Int | v == n}"