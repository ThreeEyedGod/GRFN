1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
14:1-14:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
24:1-24:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
28:1-28:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
28:10-28:11::n :: "GHC.Types.Int"
28:17-28:18::n :: "{v : GHC.Types.Int | v == n}"
28:21-28:22::lq_anf$##7205759403792814818 :: "GHC.Types.Int"
28:28-28:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
28:33-28:42::lq_anf$##7205759403792814822 :: "[GHC.Types.Char]"
28:48-28:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
28:54-28:55::n :: "{v : GHC.Types.Int | v == n}"
32:1-32:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
36:1-36:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
36:9-36:10::n :: "GHC.Types.Int"
36:16-36:17::n :: "{v : GHC.Types.Int | v == n}"
36:20-36:21::lq_anf$##7205759403792814812 :: "GHC.Types.Int"
36:27-36:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
36:32-36:41::lq_anf$##7205759403792814816 :: "[GHC.Types.Char]"
36:47-36:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
36:53-36:54::n :: "{v : GHC.Types.Int | v == n}"