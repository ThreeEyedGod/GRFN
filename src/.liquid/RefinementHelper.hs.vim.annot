1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
39:1-39:11::RefinementHelper.mustGoDown :: "[GHC.Num.Integer.Integer]<\\x1 VV -> {VV : GHC.Num.Integer.Integer | x1 >= VV}>"
39:15-39:16::lq_anf$##7205759403792815215 :: "GHC.Num.Integer.Integer"
39:18-39:19::lq_anf$##7205759403792815217 :: "GHC.Num.Integer.Integer"
39:21-39:22::lq_anf$##7205759403792815219 :: "GHC.Num.Integer.Integer"
46:1-46:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
58:1-58:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
64:1-64:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
64:10-64:11::n :: "GHC.Types.Int"
64:17-64:18::n :: "{v : GHC.Types.Int | v == n##a1sw}"
64:21-64:22::lq_anf$##7205759403792815253 :: "GHC.Types.Int"
64:28-64:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
64:33-64:42::lq_anf$##7205759403792815257 :: "[GHC.Types.Char]"
64:48-64:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
64:54-64:55::n :: "{v : GHC.Types.Int | v == n##a1sw}"
70:1-70:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
76:1-76:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
76:9-76:10::n :: "GHC.Types.Int"
76:16-76:17::n :: "{v : GHC.Types.Int | v == n##a1sx}"
76:20-76:21::lq_anf$##7205759403792815247 :: "GHC.Types.Int"
76:27-76:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
76:32-76:41::lq_anf$##7205759403792815251 :: "[GHC.Types.Char]"
76:47-76:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
76:53-76:54::n :: "{v : GHC.Types.Int | v == n##a1sx}"