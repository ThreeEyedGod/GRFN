1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
11:1-11:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
21:1-21:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
25:1-25:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
25:10-25:11::n :: "GHC.Types.Int"
25:17-25:18::n :: "{v : GHC.Types.Int | v == n}"
25:21-25:22::lq_anf$##7205759403792814753 :: "GHC.Types.Int"
25:28-25:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
25:33-25:42::lq_anf$##7205759403792814757 :: "[GHC.Types.Char]"
25:48-25:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
25:54-25:55::n :: "{v : GHC.Types.Int | v == n}"
29:1-29:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
33:1-33:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
33:9-33:10::n :: "GHC.Types.Int"
33:16-33:17::n :: "{v : GHC.Types.Int | v == n}"
33:20-33:21::lq_anf$##7205759403792814747 :: "GHC.Types.Int"
33:27-33:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
33:32-33:41::lq_anf$##7205759403792814751 :: "[GHC.Types.Char]"
33:47-33:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
33:53-33:54::n :: "{v : GHC.Types.Int | v == n}"