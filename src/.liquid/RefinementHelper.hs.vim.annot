1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
15:1-15:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
27:1-27:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
33:1-33:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
33:10-33:11::n :: "GHC.Types.Int"
33:17-33:18::n :: "{v : GHC.Types.Int | v == n##a1wC}"
33:21-33:22::lq_anf$##7205759403792815473 :: "GHC.Types.Int"
33:28-33:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
33:33-33:42::lq_anf$##7205759403792815477 :: "[GHC.Types.Char]"
33:48-33:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
33:54-33:55::n :: "{v : GHC.Types.Int | v == n##a1wC}"
39:1-39:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
45:1-45:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
45:9-45:10::n :: "GHC.Types.Int"
45:16-45:17::n :: "{v : GHC.Types.Int | v == n##a1wD}"
45:20-45:21::lq_anf$##7205759403792815467 :: "GHC.Types.Int"
45:27-45:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
45:32-45:41::lq_anf$##7205759403792815471 :: "[GHC.Types.Char]"
45:47-45:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
45:53-45:54::n :: "{v : GHC.Types.Int | v == n##a1wD}"