1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
14:1-14:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
25:1-25:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
30:1-30:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
30:10-30:11::n :: "GHC.Types.Int"
30:17-30:18::n :: "{v : GHC.Types.Int | v == n##a1st}"
30:21-30:22::lq_anf$##7205759403792815232 :: "GHC.Types.Int"
30:28-30:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
30:33-30:42::lq_anf$##7205759403792815236 :: "[GHC.Types.Char]"
30:48-30:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
30:54-30:55::n :: "{v : GHC.Types.Int | v == n##a1st}"
35:1-35:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
40:1-40:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
40:9-40:10::n :: "GHC.Types.Int"
40:16-40:17::n :: "{v : GHC.Types.Int | v == n##a1su}"
40:20-40:21::lq_anf$##7205759403792815226 :: "GHC.Types.Int"
40:27-40:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
40:32-40:41::lq_anf$##7205759403792815230 :: "[GHC.Types.Char]"
40:47-40:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
40:53-40:54::n :: "{v : GHC.Types.Int | v == n##a1su}"