1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
41:1-41:11::RefinementHelper.mustGoDown :: "[GHC.Num.Integer.Integer]<\\x1 VV -> {VV : GHC.Num.Integer.Integer | x1 >= VV}>"
41:15-41:16::lq_anf$##7205759403792828900 :: "GHC.Num.Integer.Integer"
41:18-41:19::lq_anf$##7205759403792828902 :: "GHC.Num.Integer.Integer"
41:21-41:22::lq_anf$##7205759403792828904 :: "GHC.Num.Integer.Integer"
48:1-48:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
60:1-60:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
66:1-66:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
66:10-66:11::n :: "GHC.Types.Int"
66:17-66:18::n :: "{v : GHC.Types.Int | v == n##a99B}"
66:21-66:22::lq_anf$##7205759403792828938 :: "GHC.Types.Int"
66:28-66:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
66:33-66:42::lq_anf$##7205759403792828942 :: "[GHC.Types.Char]"
66:48-66:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
66:54-66:55::n :: "{v : GHC.Types.Int | v == n##a99B}"
72:1-72:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                               && 0 < VV##0})"
78:1-78:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && VV##0 >= 0\n                                                                                  && 0 < VV##0})"
78:9-78:10::n :: "GHC.Types.Int"
78:16-78:17::n :: "{v : GHC.Types.Int | v == n##a99C}"
78:20-78:21::lq_anf$##7205759403792828932 :: "GHC.Types.Int"
78:27-78:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
78:32-78:41::lq_anf$##7205759403792828936 :: "[GHC.Types.Char]"
78:47-78:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
78:53-78:54::n :: "{v : GHC.Types.Int | v == n##a99C}"