1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
9:1-9:5::RefinementHelper.zero :: "{VV : GHC.Types.Int | VV == 0}"
12:1-12:4::RefinementHelper.one :: "{VV : GHC.Types.Int | VV /= 0}"
13:1-13:4::RefinementHelper.two :: "{VV : GHC.Types.Int | VV /= 0}"
14:1-14:6::RefinementHelper.three :: "{VV : GHC.Types.Int | VV /= 0}"
19:1-19:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
30:1-30:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
34:1-34:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
34:10-34:11::n :: "GHC.Types.Int"
34:17-34:18::n :: "{v : GHC.Types.Int | v == n}"
34:21-34:22::lq_anf$##7205759403792800763 :: "GHC.Types.Int"
34:28-34:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
34:33-34:42::lq_anf$##7205759403792800767 :: "[GHC.Types.Char]"
34:48-34:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
34:54-34:55::n :: "{v : GHC.Types.Int | v == n}"
38:1-38:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
42:1-42:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
42:9-42:10::n :: "GHC.Types.Int"
42:16-42:17::n :: "{v : GHC.Types.Int | v == n}"
42:20-42:21::lq_anf$##7205759403792800757 :: "GHC.Types.Int"
42:27-42:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
42:32-42:41::lq_anf$##7205759403792800761 :: "[GHC.Types.Char]"
42:47-42:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
42:53-42:54::n :: "{v : GHC.Types.Int | v == n}"