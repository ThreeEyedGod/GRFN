1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
56:1-56:5::RefinementHelper.pow2 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                 && 0 < VV##0}"
56:10-56:11::lq_anf$##7205759403792815610 :: "{v : GHC.Prim.Int# | v == 1}"
57:10-57:11::ds_d5F3 :: "{v : GHC.Types.Int | v >= 0}"
57:15-57:16::lq_anf$##7205759403792815599 :: "GHC.Types.Int"
57:19-57:20::lq_anf$##7205759403792815605 :: "GHC.Types.Int"
57:23-57:35::lq_anf$##7205759403792815609 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
57:28-57:35::lq_anf$##7205759403792815608 :: "GHC.Types.Int"
57:29-57:30::ds_d5F3 :: "{v : GHC.Types.Int | v >= 0}"
57:33-57:34::lq_anf$##7205759403792815607 :: "GHC.Types.Int"
58:10-58:28::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
58:14-58:28::lq_anf$##7205759403792815603 :: "[GHC.Types.Char]"
63:1-63:10::RefinementHelper.pow2Less1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0}"
63:15-63:16::lq_anf$##7205759403792815628 :: "{v : GHC.Prim.Int# | v == 0}"
64:15-64:16::ds_d5HP :: "{v : GHC.Types.Int | v >= 0}"
64:20-64:21::lq_anf$##7205759403792815614 :: "GHC.Types.Int"
64:24-64:25::lq_anf$##7205759403792815620 :: "GHC.Types.Int"
64:28-64:40::lq_anf$##7205759403792815624 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
64:33-64:40::lq_anf$##7205759403792815623 :: "GHC.Types.Int"
64:34-64:35::ds_d5HP :: "{v : GHC.Types.Int | v >= 0}"
64:38-64:39::lq_anf$##7205759403792815622 :: "GHC.Types.Int"
64:43-64:44::lq_anf$##7205759403792815627 :: "GHC.Types.Int"
65:15-65:33::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
65:19-65:33::lq_anf$##7205759403792815618 :: "[GHC.Types.Char]"
73:1-73:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
85:1-85:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
91:1-91:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
91:10-91:11::n :: "GHC.Types.Int"
91:17-91:18::n :: "{v : GHC.Types.Int | v == n##a1uM}"
91:21-91:22::lq_anf$##7205759403792815591 :: "GHC.Types.Int"
91:28-91:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
91:33-91:42::lq_anf$##7205759403792815595 :: "[GHC.Types.Char]"
91:48-91:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
91:54-91:55::n :: "{v : GHC.Types.Int | v == n##a1uM}"