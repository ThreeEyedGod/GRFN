1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
49:1-49:5::RefinementHelper.pow2 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0\n                                                                 && 0 < VV##0}"
49:10-49:11::lq_anf$##7205759403792815610 :: "{v : GHC.Prim.Int# | v == 1}"
50:10-50:11::ds_d5F3 :: "{v : GHC.Types.Int | v >= 0}"
50:15-50:16::lq_anf$##7205759403792815599 :: "GHC.Types.Int"
50:19-50:20::lq_anf$##7205759403792815605 :: "GHC.Types.Int"
50:23-50:35::lq_anf$##7205759403792815609 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
50:28-50:35::lq_anf$##7205759403792815608 :: "GHC.Types.Int"
50:29-50:30::ds_d5F3 :: "{v : GHC.Types.Int | v >= 0}"
50:33-50:34::lq_anf$##7205759403792815607 :: "GHC.Types.Int"
51:10-51:28::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
51:14-51:28::lq_anf$##7205759403792815603 :: "[GHC.Types.Char]"
56:1-56:10::RefinementHelper.pow2Less1 :: "{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | VV##0 >= 0}"
56:15-56:16::lq_anf$##7205759403792815628 :: "{v : GHC.Prim.Int# | v == 0}"
57:15-57:16::ds_d5HP :: "{v : GHC.Types.Int | v >= 0}"
57:20-57:21::lq_anf$##7205759403792815614 :: "GHC.Types.Int"
57:24-57:25::lq_anf$##7205759403792815620 :: "GHC.Types.Int"
57:28-57:40::lq_anf$##7205759403792815624 :: "{v : GHC.Types.Int | v >= 0\n                     && 0 < v}"
57:33-57:40::lq_anf$##7205759403792815623 :: "GHC.Types.Int"
57:34-57:35::ds_d5HP :: "{v : GHC.Types.Int | v >= 0}"
57:38-57:39::lq_anf$##7205759403792815622 :: "GHC.Types.Int"
57:43-57:44::lq_anf$##7205759403792815627 :: "GHC.Types.Int"
58:15-58:33::RefinementHelper.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
58:19-58:33::lq_anf$##7205759403792815618 :: "[GHC.Types.Char]"
66:1-66:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
78:1-78:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
84:1-84:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
84:10-84:11::n :: "GHC.Types.Int"
84:17-84:18::n :: "{v : GHC.Types.Int | v == n##a1uM}"
84:21-84:22::lq_anf$##7205759403792815591 :: "GHC.Types.Int"
84:28-84:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
84:33-84:42::lq_anf$##7205759403792815595 :: "[GHC.Types.Char]"
84:48-84:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
84:54-84:55::n :: "{v : GHC.Types.Int | v == n##a1uM}"