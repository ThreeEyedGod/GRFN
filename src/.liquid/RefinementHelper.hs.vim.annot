1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
58:1-58:4::RefinementHelper.die :: "forall a . {VV##0 : [GHC.Types.Char] | false} -> a"
70:1-70:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | 2 <= VV##0})"
76:1-76:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV##0 : GHC.Types.Int | VV##0 == x1\n                                                                                  && 2 <= VV##0})"
76:10-76:11::n :: "GHC.Types.Int"
76:17-76:18::n :: "{v : GHC.Types.Int | v == n##a1rN}"
76:21-76:22::lq_anf$##7205759403792815161 :: "GHC.Types.Int"
76:28-76:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
76:33-76:42::lq_anf$##7205759403792815165 :: "[GHC.Types.Char]"
76:48-76:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
76:54-76:55::n :: "{v : GHC.Types.Int | v == n##a1rN}"