1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
9:1-9:5::RefinementHelper.zero :: "{VV : GHC.Types.Int | VV == 0}"
12:1-12:4::RefinementHelper.one :: "{VV : GHC.Types.Int | VV /= 0}"
13:1-13:4::RefinementHelper.two :: "{VV : GHC.Types.Int | VV /= 0}"
14:1-14:6::RefinementHelper.three :: "{VV : GHC.Types.Int | VV /= 0}"
18:1-18:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
18:5-18:8::msg :: "{VV : [GHC.Types.Char] | false}"
18:17-18:20::msg :: "{v : [GHC.Types.Char] | false}"
29:1-29:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
33:1-33:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
33:10-33:11::n :: "GHC.Types.Int"
33:17-33:18::n :: "{v : GHC.Types.Int | v == n}"
33:21-33:22::lq_anf$##7205759403792800769 :: "GHC.Types.Int"
33:28-33:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
33:33-33:42::lq_anf$##7205759403792800773 :: "[GHC.Types.Char]"
33:48-33:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
33:54-33:55::n :: "{v : GHC.Types.Int | v == n}"
37:1-37:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
41:1-41:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
41:9-41:10::n :: "GHC.Types.Int"
41:16-41:17::n :: "{v : GHC.Types.Int | v == n}"
41:20-41:21::lq_anf$##7205759403792800763 :: "GHC.Types.Int"
41:27-41:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
41:32-41:41::lq_anf$##7205759403792800767 :: "[GHC.Types.Char]"
41:47-41:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
41:53-41:54::n :: "{v : GHC.Types.Int | v == n}"