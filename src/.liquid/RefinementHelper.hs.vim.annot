1:1-1:1::RefinementHelper.$trModule :: "GHC.Types.Module"
9:1-9:4::RefinementHelper.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
19:1-19:14::RefinementHelper.filterInvalid :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | 2 <= VV})"
23:1-23:9::RefinementHelper.intsGte2 :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && 2 <= VV})"
23:10-23:11::n :: "GHC.Types.Int"
23:17-23:18::n :: "{v : GHC.Types.Int | v == n}"
23:21-23:22::lq_anf$##7205759403792819599 :: "GHC.Types.Int"
23:28-23:42::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
23:33-23:42::lq_anf$##7205759403792819603 :: "[GHC.Types.Char]"
23:48-23:55::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
23:54-23:55::n :: "{v : GHC.Types.Int | v == n}"
27:1-27:20::RefinementHelper.filterInvalidNonPos :: "GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV >= 0\n                                                                            && 0 < VV})"
31:1-31:8::RefinementHelper.intsPos :: "x1:GHC.Types.Int -> (Data.Either.Either [GHC.Types.Char] {VV : GHC.Types.Int | VV == x1\n                                                                               && VV >= 0\n                                                                               && 0 < VV})"
31:9-31:10::n :: "GHC.Types.Int"
31:16-31:17::n :: "{v : GHC.Types.Int | v == n}"
31:20-31:21::lq_anf$##7205759403792819593 :: "GHC.Types.Int"
31:27-31:41::Data.Either.Left :: "{VV : forall a b .\n      a -> {v : (Data.Either.Either a b) | isLeft v} | VV == Left}"
31:32-31:41::lq_anf$##7205759403792819597 :: "[GHC.Types.Char]"
31:47-31:54::Data.Either.Right :: "{VV : forall a b .\n      b -> {v : (Data.Either.Either a b) | not (isLeft v)} | VV == Right}"
31:53-31:54::n :: "{v : GHC.Types.Int | v == n}"